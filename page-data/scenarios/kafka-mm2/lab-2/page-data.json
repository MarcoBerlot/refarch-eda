{"componentChunkName":"component---src-pages-scenarios-kafka-mm-2-lab-2-index-mdx","path":"/scenarios/kafka-mm2/lab-2/","result":{"pageContext":{"frontmatter":{"title":"Kafka Mirror Maker 2 Lab 2","description":"Using Mirror Maker 2 from Event Streams on premise to Event stream on cloud"},"relativePagePath":"/scenarios/kafka-mm2/lab-2/index.mdx","titleType":"append","MdxNode":{"id":"7285fa89-3098-5e42-a200-77598d917938","children":[],"parent":"43f1b531-8f59-5e88-a097-1d610010eb4a","internal":{"content":"---\ntitle: Kafka Mirror Maker 2 Lab 2\ndescription: Using Mirror Maker 2 from Event Streams on premise to Event stream on cloud\n---\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Start Mirror Maker 2</AnchorLink>\n  <AnchorLink>Start Consumer from target cluster</AnchorLink>\n  <AnchorLink>Start Producer to source cluster</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nFor this scenario the source cluster is an Event Streams on premise on OpenShift, and the target cluster is an Event Stream on Cloud. Mirror Maker 2 runs on OpenShift.\n\n ![1](../images/mm2-a-a.png)\n\n## Start Mirror Maker 2\n\n* Login to the OpenShift cluster using the console and get the API token\n\n ```shell\n oc login --token=L0.... --server=https://api.eda-solutions.gse-ocp.net:6443\n ```\n\n* You have to decide if you want to isolate mirror maker 2 pods in its own namespace or runs in the same namespace as Event Streams. For completeness we will create our own namespace / OCP project. Create a project in OpenShift to deploy Mirror Maker cluster, for example: \n\n ```shell\n oc new-project mm2-es\n ```\n If you have already created this project, use this command to be in this project context: `oc project mm2-es`.\n\n* Create a secret for the API KEY of the Event Streams target cluster:\n\n ```shell\n  oc create secret generic es-oc-api-secret --from-literal=password=<replace-with-event-streams-on-cloud-apikey>\n  ```\n\n* Verify the Event Streams on OpenShift route and end point URL. This URL will be used to configure Mirror Maker 2. \n\n ```shell\n # Go to the project where Event Streams is installed\n oc project integration\n # Get the bootstrap URL\n oc get routes es-1-kafka-bootstrap  -o=jsonpath='{.status.ingress[0].host}{\"\\n\"}'\n # result:\n    es-1-kafka-bootstrap-integration.apps.eda-solutions.gse-ocp.net\n ```\n\n* Copy the CA cluster and clients certificate secrets from the event streams project (`integration`) and the target project:\n\n ```shell\n  oc get secret es-1-cluster-ca-cert -n integration -o yaml | sed s/\"namespace: integration\"/\"namespace: mm2-es\"/ | oc apply -n mm2-es -f -\n\n  oc get secret es-1-clients-ca-cert -n integration -o yaml | sed s/\"namespace: integration\"/\"namespace: mm2-es\"/ | oc apply -n mm2-es -f -\n ```\n\n* Get the TLS CA root certificate from the event streams brokers\n\n    ```shell\n    oc get secrets\n    oc extract secret/es-1-cluster-ca-cert --keys=ca.crt --to=- > ca.crt\n    oc extract secret/es-1-clients-ca-cert --keys=ca.crt --to=- >> ca.crt\n    ```\n\n* Transform the certificates for java truststore\n\n    ```shell\n    keytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt\n    ```\n\n* Create a secret from the truststore file so it can be mounted as needed into consumer or producer running in the same OpenShift cluster. \n\n  ```shell\n  oc project mm2-es\n  oc create secret generic es-1-truststore --from-file=./truststore.jks\n  ```\n\n* Define source and target cluster properties in a Mirror Maker 2 `es-mm2.yml` descriptor file. There is a file for the replication between Event Streams OCP to Event Streams on cloud [es-ocp-to-es-oc.yml](). We strongly recommend to study the schema definition of this [custom resource from this page](https://github.com/strimzi/strimzi-kafka-operator/blob/2d35bfcd99295bef8ee98de9d8b3c86cb33e5842/install/cluster-operator/048-Crd-kafkamirrormaker2.yaml#L648-L663). \n\nHere are some important parameters: The namespace needs to match the newly created project:\n\n```yaml\napiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaMirrorMaker2\nmetadata:\n  name: es-1\n  namespace: mm2-es\nspec:\n  version: 2.5.0\n  replicas: 1\n```\n\nThe version matches the Kafka version we use. The number of replicas can be set to 1 to start.\n\nThen the yaml defined the connection configuration for each clusters: Event Streams on cloud, so you need to define the bootstrap servers (This could come from a config map too) and the API key coming from the previously defined secret.\n\n```yaml\nclusters:\n  - alias: \"event-streams-wdc\"\n    bootstrapServers: broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\n    config:\n      config.storage.replication.factor: 3\n      offset.storage.replication.factor: 3\n      status.storage.replication.factor: 3\n    tls: {}\n    authentication:\n      passwordSecret:\n          secretName: es-oc-api-secret  \n          password: password \n      username: token\n      type: plain\n```\n\nFor Event Streams on premise running within OpenShift, the connection uses TLS and the certificates.\n\n```yaml\n- alias: \"es-1-cluster\"\n    bootstrapServers: es-1-kafka-bootstrap-integration.apps.eda-solutions.gse-ocp.net:9093\n    config:\n      config.storage.replication.factor: 3\n      offset.storage.replication.factor: 3\n      status.storage.replication.factor: 3\n      ssl.endpoint.identification.algorithm: https\n    tls: \n      trustedCertificates:\n        - secretName: es-1-clients-ca-cert\n          certificate: ca.crt\n        - secretName: es-1-cluster-ca-cert\n          certificate: ca.crt\n\n          \n```\n\nFinally the `connectCluster` attribute defines the cluster alias used for Kafka Connect, it must match a cluster in the list at `spec.clusters`.\n    \n \n ```shell\n oc apply -f mirror-maker-2/es-ocp/es-ocp-to-es-oc.yml\n ```\n\n oc describe kafkamirrormaker2 mm2-es-1\n\n## Start Consumer from target cluster\n\nSpecifying the target cluster as Event Streams on cloud, we can also use Kafdrop to see the replicated topic.\n\n\n## Start Producer to source cluster\n","type":"Mdx","contentDigest":"ff34ce386961e1608a0ac8222b1f2fd5","counter":527,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Kafka Mirror Maker 2 Lab 2\ndescription: Using Mirror Maker 2 from Event Streams on premise to Event stream on cloud\n---\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Start Mirror Maker 2</AnchorLink>\n  <AnchorLink>Start Consumer from target cluster</AnchorLink>\n  <AnchorLink>Start Producer to source cluster</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nFor this scenario the source cluster is an Event Streams on premise on OpenShift, and the target cluster is an Event Stream on Cloud. Mirror Maker 2 runs on OpenShift.\n\n ![1](../images/mm2-a-a.png)\n\n## Start Mirror Maker 2\n\n* Login to the OpenShift cluster using the console and get the API token\n\n ```shell\n oc login --token=L0.... --server=https://api.eda-solutions.gse-ocp.net:6443\n ```\n\n* You have to decide if you want to isolate mirror maker 2 pods in its own namespace or runs in the same namespace as Event Streams. For completeness we will create our own namespace / OCP project. Create a project in OpenShift to deploy Mirror Maker cluster, for example: \n\n ```shell\n oc new-project mm2-es\n ```\n If you have already created this project, use this command to be in this project context: `oc project mm2-es`.\n\n* Create a secret for the API KEY of the Event Streams target cluster:\n\n ```shell\n  oc create secret generic es-oc-api-secret --from-literal=password=<replace-with-event-streams-on-cloud-apikey>\n  ```\n\n* Verify the Event Streams on OpenShift route and end point URL. This URL will be used to configure Mirror Maker 2. \n\n ```shell\n # Go to the project where Event Streams is installed\n oc project integration\n # Get the bootstrap URL\n oc get routes es-1-kafka-bootstrap  -o=jsonpath='{.status.ingress[0].host}{\"\\n\"}'\n # result:\n    es-1-kafka-bootstrap-integration.apps.eda-solutions.gse-ocp.net\n ```\n\n* Copy the CA cluster and clients certificate secrets from the event streams project (`integration`) and the target project:\n\n ```shell\n  oc get secret es-1-cluster-ca-cert -n integration -o yaml | sed s/\"namespace: integration\"/\"namespace: mm2-es\"/ | oc apply -n mm2-es -f -\n\n  oc get secret es-1-clients-ca-cert -n integration -o yaml | sed s/\"namespace: integration\"/\"namespace: mm2-es\"/ | oc apply -n mm2-es -f -\n ```\n\n* Get the TLS CA root certificate from the event streams brokers\n\n    ```shell\n    oc get secrets\n    oc extract secret/es-1-cluster-ca-cert --keys=ca.crt --to=- > ca.crt\n    oc extract secret/es-1-clients-ca-cert --keys=ca.crt --to=- >> ca.crt\n    ```\n\n* Transform the certificates for java truststore\n\n    ```shell\n    keytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt\n    ```\n\n* Create a secret from the truststore file so it can be mounted as needed into consumer or producer running in the same OpenShift cluster. \n\n  ```shell\n  oc project mm2-es\n  oc create secret generic es-1-truststore --from-file=./truststore.jks\n  ```\n\n* Define source and target cluster properties in a Mirror Maker 2 `es-mm2.yml` descriptor file. There is a file for the replication between Event Streams OCP to Event Streams on cloud [es-ocp-to-es-oc.yml](). We strongly recommend to study the schema definition of this [custom resource from this page](https://github.com/strimzi/strimzi-kafka-operator/blob/2d35bfcd99295bef8ee98de9d8b3c86cb33e5842/install/cluster-operator/048-Crd-kafkamirrormaker2.yaml#L648-L663). \n\nHere are some important parameters: The namespace needs to match the newly created project:\n\n```yaml\napiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaMirrorMaker2\nmetadata:\n  name: es-1\n  namespace: mm2-es\nspec:\n  version: 2.5.0\n  replicas: 1\n```\n\nThe version matches the Kafka version we use. The number of replicas can be set to 1 to start.\n\nThen the yaml defined the connection configuration for each clusters: Event Streams on cloud, so you need to define the bootstrap servers (This could come from a config map too) and the API key coming from the previously defined secret.\n\n```yaml\nclusters:\n  - alias: \"event-streams-wdc\"\n    bootstrapServers: broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093\n    config:\n      config.storage.replication.factor: 3\n      offset.storage.replication.factor: 3\n      status.storage.replication.factor: 3\n    tls: {}\n    authentication:\n      passwordSecret:\n          secretName: es-oc-api-secret  \n          password: password \n      username: token\n      type: plain\n```\n\nFor Event Streams on premise running within OpenShift, the connection uses TLS and the certificates.\n\n```yaml\n- alias: \"es-1-cluster\"\n    bootstrapServers: es-1-kafka-bootstrap-integration.apps.eda-solutions.gse-ocp.net:9093\n    config:\n      config.storage.replication.factor: 3\n      offset.storage.replication.factor: 3\n      status.storage.replication.factor: 3\n      ssl.endpoint.identification.algorithm: https\n    tls: \n      trustedCertificates:\n        - secretName: es-1-clients-ca-cert\n          certificate: ca.crt\n        - secretName: es-1-cluster-ca-cert\n          certificate: ca.crt\n\n          \n```\n\nFinally the `connectCluster` attribute defines the cluster alias used for Kafka Connect, it must match a cluster in the list at `spec.clusters`.\n    \n \n ```shell\n oc apply -f mirror-maker-2/es-ocp/es-ocp-to-es-oc.yml\n ```\n\n oc describe kafkamirrormaker2 mm2-es-1\n\n## Start Consumer from target cluster\n\nSpecifying the target cluster as Event Streams on cloud, we can also use Kafdrop to see the replicated topic.\n\n\n## Start Producer to source cluster\n","frontmatter":{"title":"Kafka Mirror Maker 2 Lab 2","description":"Using Mirror Maker 2 from Event Streams on premise to Event stream on cloud"},"fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/scenarios/kafka-mm2/lab-2/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}