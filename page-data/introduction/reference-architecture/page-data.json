{"componentChunkName":"component---src-pages-introduction-reference-architecture-index-mdx","path":"/introduction/reference-architecture/","result":{"pageContext":{"frontmatter":{"title":"Reference Architecture","description":"What is the purpose of the event-driven reference architecture?"},"relativePagePath":"/introduction/reference-architecture/index.mdx","titleType":"append","MdxNode":{"id":"2d812c4f-fba6-58a2-a756-9fd653923a4f","children":[],"parent":"5fb385a5-daca-5038-9523-1e18d857ad8d","internal":{"content":"---\ntitle: Reference Architecture\ndescription: What is the purpose of the event-driven reference architecture?\n---\n\n<AnchorLinks>\n  <AnchorLink>Event Driven Architecture</AnchorLink>\n  <AnchorLink>Extended Architecture</AnchorLink>\n  <AnchorLink>Integration with analytics and machine learning</AnchorLink>\n  <AnchorLink>Modern Data Lake</AnchorLink>\n  <AnchorLink>Legacy Integration</AnchorLink>\n</AnchorLinks>\n\nWe defined the starting point for a cloud-native event-driven architecture to be that it supports at least the following important capabilities:\n\n* Being able to communicate asynchronously between components to improve elasticity, resilience and responsiveness. \n* Support exactly one delivery of messages in a asynchronous request/response interactions\n* Publish messages as facts or events as immutable records to an append log so subscribers can consume them at any point of time.\n* Processing streams of events to derive real time insight/intelligence.\n* Providing communication mechanism between event-driven microservices and functions.\n\n## Event Driven Architecture\n\nEvent-driven architecture is not something new, and it is not just about Kafka. As listed in previous section EDA at the core has to support \nasynchronous communication between application in two major semantics:\n\n* request/response with exactly one delivery with no data lost, when a component is asking another component to do something for him. This approach\nis to address long running transaction or business process and enforce using queuing technology.\n* deliver facts about its own data to an immutable log so other components can derive something about it. This is a pub/sub model with strong time decoupling.\n\nTo support these EDA has a message as a service capability as cluster of message brokers. The brokers\nprovides the connectivity between the other components: \n\n![hl-arch-ra](../../images/hl-arch-ra.png)\n\nWhere:\n\n* [Event sources](../../concepts/terms-and-definitions/#event-sources): generates events from sources such as IoT devices, web apps, mobile apps, mainframe applications, change data capture agents...\n* **Mainframe queuing apps** are source for messages using the IBM MQ replication feature to expose mainframe messages to the cloud native MQ broker and so to the cloud native microservices. The strong consistency\nis kept but facts about the business transactions are propagated to the eventual consistency world.\n* **Messaging as a service** is the core backbone of the architecture to support  any type of asynchronous communication:\n\n    * [IBM MQ](https://www.ibm.com/cloud/mq): delivers the exatly one delivery, strong consistency and support queuing and pub/sub protocol. MQ brokers in cluster support high availability cross data centers to build event-mesh. IBM MQ will be the unique technology to guarantee the end to end message availability.\n    * [IBM Event Streams](https://www.ibm.com/cloud/event-streams): provides an event backbone supporting Pub/Sub protocol only, with immutable append log. Event Streams is based on [Apache Kafka](https://kafka.apache.org/) and can run on-premise or as [managed services](https://cloud.ibm.com/catalog/services/event-streams)\n\n* **Reactive cloud native applications**: The top row represents modern applications which adopt the [reactive manifesto](https://www.reactivemanifesto.org/) as a way to be resilient, elastic and message driven. To reduce microservice to microservice dependency and reduce coupling, modern microservices are \n[event-driven](../../concepts/terms-and-definitions/#microservices) and \nimplemented with reactive framework (e.g. vert.x )and reactive messaging (e.g. microprofile 3.0 reactive messaging). Some of those applications can be function and serverless apps, meaning scaling to zero and being\nable to wake-up on event arrival. Finally it is important to note that business process applications running in BPM can be triggered\nby event arrival, can generate intermediate events, and can generate events at the process completion. Those business events are important to shared\nwith other applications to being expose to event backbone.\n* The adoption of Kafka as a way to support event backbone capability, also means that records can be saved for a long period of time, but it is relevant to be able to persist those records\nor an aggregate view of those records to a data lake or a set of s3 buckets. So most of EDA has sink connectors to data lake. \n* The governance of these asynchronous applications is becoming a major requirement when the adoption of such architecture grows. AsyncAPI, combined with schema registry\nhelps defining the intercommunication contracts. While most of the event-driven microservices are exposing Open APIs, enforced by API gateway, it is now \npossible to do the same enforcement and monitoring with the [event endpoint gateway](https://community.ibm.com/community/user/integration/blogs/dale-lane1/2021/04/12/a-demo-of-event-endpoint-management).\n* The bottom row supports new types of application for **data streaming**: the first set of applications \nare for getting business insight of the event sequencing by looking at event patterns as supported\nby the complex event processing engine (Apache Flink), and the second type are to process near-real time analytics to \ncompute analytical processing across multiple event streams. The technologies of choice are [Apache Flink](/technology/flink) and [IBM SQL query](https://www.ibm.com/cloud/sql-query).\nThose applications are also cloud native, and run in container deployable inside Kubernetes clusters.\n\nThis reference architecture is illustrated in the implementation of two solutions: [the shipping goods over sea solution](https://ibm-cloud-architecture.github.io/refarch-kc/) and the [vaccine at scale](https://ibm-cloud-architecture.github.io/vaccine-solution-main/) solution.\n\n## Extended Architecture\n\nThe architecture  presented in previous section, supports new data ingestion capability and new data sharing plaform.\n\nevent-driven reference architecture provides the framework to support event-driven applications and solutions. The extended architecture provides the connections for:\n\n  * Integration with legacy apps and data resources\n  * Integration with analytics or machine learning to derive near real-time insights\n\nThe diagram below shows how these capabilities fit together to form an extended event-driven architecture.\n\n![hl-arch-ra-adv](../../images/hl-arch-ra-adv.png)\n\n In 7. the AI workbench includes tools to do data analysis and visualization, build training and test sets from any datasource and in particular Event Store, and develop models. Models are pushed to streaming analytics component.\n\n\n## Integration with analytics and machine learning\n\nThe extended architecture extends the basic EDA reference architecture with concepts showing how data science, artificial intelligence and machine learning can be incorporated into an event-driven solution. The following diagram illustrats the event sources on the left injecting events to topics where green components are consuming from. Those components apply filtering, compute aggregates and stateful operation with time window based rules. Some of those components can include training scoring model, to do for example anomaly detection. The model is built with data scientist workbench tool, like Watson Studio.\n\n ![2](../../images/hl-arch-rt-analytics.png)\n\nThe starting point for data scientists to be able to derive machine learning models or analyze data for trends and behaviors is the existence of the data in a form that they can be consumed. For real-time intelligent solutions, data scientists typically inspect event histories and decision or action records from a system. Then, they reduce this data to some simplified model that scores new event data as it arrives.\n\n### Getting the data for the data scientist:\n\nWith near real-time event streams, the challenge is in handling unbounded data or a continuous flow of events. To make this consumable for the data scientist you need to capture the relevant data and store it so that it can be pulled into the analysis and model-building process as required.\n\nFollowing our event-driven reference architecture the event stream would be a Kafka topic on the event backbone.  From here there are two possibilities for making that event data available and consumable to the data scientist:\n\n* The event stream or event log can be accessed directly through Kafka and pulled into the analysis process\n* The event stream can be pre-processed by the streaming analytics system and stored for future use in the analysis process. You have a choice of store type to use. Within public IBM cloud object storage [Cloud Object Store](https://www.ibm.com/cloud/object-storage) can be used as a cost-effective historical store.\n\nBoth approaches are valid, pre-processing through streaming analytics provides opportunity for greater manipulation of the data, or storing data over time windows for complex event processing. However, the more interesting distinction is where you use a predictive (ML model) to score arriving events or stream data in real time. In this case you may use streaming analytics to extract and save the event data for analysis, model building, and model training and also for scoring (executing) a derived model in line in the real time against arriving event data.\n\n* The event and decision or action data is made available in cloud object storage for model building through streaming analytics.\n* Models may be developed by tuning and parameter fitting, standard form fitting, classification techniques, and text analytics methods.\n* Increasingly artificial intelligence (AI) and machine learning (ML) frameworks are used to discover and train useful predictive models as an alternative to parameterizing existing model types manually.\n* These techniques lead to process and data flows where the predictive model is trained offline using event histories from the event and the decision or action store possibly augmented with some supervisory outcome labelling, as illustrated by the paths from the `Event Backbone` and `Stream Processing` store into `Learn/Analyze`.\n* A model trained in this way includes some “scoring” API that can be invoked with fresh event data to generate a model-based prediction for future behavior and event properties of that specific context.\n* The scoring function is then easily reincorporated into the streaming analytics processing to generate predictions and insights.\n\nThese combined techniques can lead to the creation of near real-time intelligent applications:\n\n1. Event-driven architecture\n2. Identification of predictive insights using event storming methodology\n3. Developing models for these insights using machine learning\n4. Near real-time scoring of the insight models using a streaming analytics processing framework\n\nThese are scalable easily extensible, and adaptable applications responding in near real time to new situations. There are easily extended to build out and evolve from an initial minimal viable product (MVP) because of the loose coupling in the event-driven architecture, , and streams process domains.\n\n### Data scientist workbench\n\nTo complete the extended architecture for integration with analytics and machine learning, consider the toolset and frameworks that the data scientist can use to derive the models.  [Watson Studio](https://www.ibm.com/marketplace/watson-studio)  provides tools for data scientists, application developers, and subject matter experts to collaboratively and easily work with data to build and train models at scale.\n\nFor more information see [Getting started](https://dataplatform.cloud.ibm.com/docs/content/getting-started/overview-ws.html) with Watson Studio.\n\n## Modern Data Lake\n\nOne of the standard architecture to build data lake is the lambda architecture with data injection, stream processing, batch processing to data store and then queries as part of the service layer. It is designed to handle massive quantities of data by taking advantage of both batch and stream processing methods. Lambda architecture depends on a data model with an append-only, immutable data source that serves as a system of record. The batch layer precomputes results using a distributed processing system that can handle very large quantities of data. Output from the batch and speed layers are stored in the serving layer, which responds to ad-hoc queries by returning precomputed views or building views from the processed data.\n\nThe following figure is an enhancement of the lambda architecture with the adoption of Kafka as event backbone for data pipeline and source of truth and streaming processing to support real time analytics and streaming queries.\n\n ![3](../../images/data-lake-1.png)\n\nOn the left the different data sources, injected using different protocols like MQTT, HTTP, or Kafka Connect... The business applications are supported by different microservices that are exposed by APIs and event-driven. The APIs is managed by API management product. Business events are produced as facts about the business entities, and persisted in the append log of kafka topic. Transactional data can be injected from MQ queues to Kafka topic, via MQ connectors. \n\nThe data platform offers a set of capabilities to expose data for consumers like Data Science workbench (Watson Studio) via virtualization and data connections. The data are cataloged and governed to ensure integrity and visibility. The storage can be block based, document oriented or table oriented.\n\nBatch queries and map reduce can address huge data raw, while streaming queries can support real time aggregates and analytics.\n\n## Legacy Integration\n\nWhile you create new digital business applications as self-contained systems, you likely need to integrate legacy apps and databases into the event-driven system. Two ways of coming directly into the event-driven architecture are as follows:\n\n1. Where legacy applications are connected with MQ. You can connect directly from MQ to the Kafka in the event backbone.  See [IBM Event Streams getting started with MQ article](https://ibm.github.io/event-streams/connecting/mq/). The major idea here is to leverage the transactionality support of MQ, so writing to the databased and to the queue happen in the same transaction:\n\n ![3](../../images/hl-arch-data-pipe-mq.png)\n\n2. Where databases support the capture of changes to data, you can publish changes as events to Kafka and hence into the event infrastructure. This could leverage the [outbox pattern](/patterns/intro/#transactional-outbox) where events are prepared by the application and written, in the same transaction as the other tables, and read by the CDC capture agent.\n\n ![4](../../images/hl-arch-data-pipe-cdc.png)\n\nOr use an efficient CDC product to get the change data capture at the transaction level. IBM offers the best CDC product on the market, ([InfoSphere Data Replication 11.4.0](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.idr.frontend.doc/pv_welcome.html)), with subsecond average latency and support full transactional semantics with exactly once consumption. It includes an [efficient Kafka integration](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/systemrequirements.html). \n\nOne of the challenges of basic CDC products, is the replication per table pattern, leads to retry to rebuild the transaction integrity using kafka stream to join data from multiple topics. The [TCC (Transactionally consistent consumer) technology](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/kafkatcc.html) allows Kafka replication to have semantics similar to a relational database. This dramatically increases the types of business logic that can be implemented. Developer can recreate the order of operations in source transactions across multiple Kafka topics and partitions and consume Kafka records that are free of duplicates by including the Kafka transactionally consistent consumer library in your Java applications. \nTCC allows:\n\n* Elimination of any duplicates, even in abnormal termination scenarios\n* Reconstruction of exact transaction order, despite those transactions having been performance optimized and applied out of order to Kafka\n* Reconstruction of exact operation order within a transaction, despite said operations having been applied to different topics and/or partitions.  This is not offered by default Kafka's \"exactly once\" functionality\n* Ability for hundreds+ producers to participate in a single transaction.  Kafka's implementation has one producer create all messages for a transaction, despite those messages going to different topics.\n* Provides a unique bookmark, so that downstream applications can check-point and resume exactly where they last left off if they fail.\n\n*We recommend listeing to this presentation from Shawn Roberston - IBM, on [A Solution for Leveraging Kafka to Provide End-to-End ACID Transactions](https://www.confluent.io/kafka-summit-sf18/a-solution-for-leveraging-kafka-to-provide-end-to-end-acid-transactions/)*\n\nThe second, very important, feature is on the producer side, with the Kafka custom operation processor (or KCOP) infrastructure. KCOP helps you to control over the Kafka producer records that are written to Kafka topics in response to insert, update, and delete operations that occur on source database tables. It allows a user to programmatically dictate the exact key an byte values of the message written to Kafka. Therefore any individual row transformation message encoding format is achievable. Out of the box it includes Avro, CSV, JSON message encoding formats. It is possible to perform column level RSA encryption on certain values before writing.\nIt also permits enriching of the message with additional annotation if needed.\nDevelopers have the complete choice over how data is represented. Eg. Can write data in Kafka Compaction compliant format with deletes being represented as Kafka tombstones or can write the content of the message being deleted.\n\nIt also supports Kafka Header fields for efficient downstream routing without the need for immediate de-serialization.\nThe KCOP allows a user to determine how many messages are written to Kafka in response to a source operation, the content of the messages, and their destination.\n* Allows for filtering based on column values.\n* Allows for writing the entire row with sensitive data to highly restricted topics and a subset of the columns to wider shared topics.\n* Allows for writing the same message in two different formats to two different topics.  Useful in environments where some consuming applications want JSON, others prefer Avro, both can be produced in parallel if desired.\n* Allows for sending special flags to a monitoring topic.  Eg. when a transaction exceeds $500, in addition to the regular message, a special topic is written to notifying of the large value transaction\n\n\nThe two diagrams above, illustrate a common architecture for data pipeline, using event backbone, where the data is transformed into different data model, that can be consumed by components that act on those data, and move the data document into data lake for big data processing.\n\nFinally it is important to note that the deployment of the event streams, CDC can be colocated in the mainframe to reduce operation and runtime cost. It also reduces complexity. In the following diagram, event stream brokers are deployed on OpenShift on Linux on Z and the CDC servers on Linux too.\n\n ![6](../../images/es-on-z-deployment.png)\n \nThis architecture pattern try to reduce the MIPs utilization on the mainframe to the minimum by still ensuring data pipeline, with transactional integrity. \n\n* Quality of Service – autoscaling / balancing between Linux nodes, Resilience.\n* Latency  - memory speed (Network ->  HiperSocket, with memory speed and bandwidth)\n* Reduce MIPS  (avoid Authentication-TLS overhead on z/OS as no network traffic is encrypted)\n* Avoid network spend / management / maintenance between servers\n* Improved QoS for the Kafka service – inherits Z platform  (Event Streams is the only Kafka variant currently supported on Linix on Z) \n* Reduced complexity / management cost\n* Reduced latency / network infrastructure (apply – Kafka hop is now  in memory) – avoids need for encryption \n\nThe CDC server uses [Transaction Capture Consumer](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/kafkatcc.html) to keep transaction integrity while publishing to kafka topic. CICS Business events are mechanism for declaratively emitting event from CICS routines.\n\n","type":"Mdx","contentDigest":"f9ef2b7dfb1e7f63764c3161ca442861","owner":"gatsby-plugin-mdx","counter":719},"frontmatter":{"title":"Reference Architecture","description":"What is the purpose of the event-driven reference architecture?"},"exports":{},"rawBody":"---\ntitle: Reference Architecture\ndescription: What is the purpose of the event-driven reference architecture?\n---\n\n<AnchorLinks>\n  <AnchorLink>Event Driven Architecture</AnchorLink>\n  <AnchorLink>Extended Architecture</AnchorLink>\n  <AnchorLink>Integration with analytics and machine learning</AnchorLink>\n  <AnchorLink>Modern Data Lake</AnchorLink>\n  <AnchorLink>Legacy Integration</AnchorLink>\n</AnchorLinks>\n\nWe defined the starting point for a cloud-native event-driven architecture to be that it supports at least the following important capabilities:\n\n* Being able to communicate asynchronously between components to improve elasticity, resilience and responsiveness. \n* Support exactly one delivery of messages in a asynchronous request/response interactions\n* Publish messages as facts or events as immutable records to an append log so subscribers can consume them at any point of time.\n* Processing streams of events to derive real time insight/intelligence.\n* Providing communication mechanism between event-driven microservices and functions.\n\n## Event Driven Architecture\n\nEvent-driven architecture is not something new, and it is not just about Kafka. As listed in previous section EDA at the core has to support \nasynchronous communication between application in two major semantics:\n\n* request/response with exactly one delivery with no data lost, when a component is asking another component to do something for him. This approach\nis to address long running transaction or business process and enforce using queuing technology.\n* deliver facts about its own data to an immutable log so other components can derive something about it. This is a pub/sub model with strong time decoupling.\n\nTo support these EDA has a message as a service capability as cluster of message brokers. The brokers\nprovides the connectivity between the other components: \n\n![hl-arch-ra](../../images/hl-arch-ra.png)\n\nWhere:\n\n* [Event sources](../../concepts/terms-and-definitions/#event-sources): generates events from sources such as IoT devices, web apps, mobile apps, mainframe applications, change data capture agents...\n* **Mainframe queuing apps** are source for messages using the IBM MQ replication feature to expose mainframe messages to the cloud native MQ broker and so to the cloud native microservices. The strong consistency\nis kept but facts about the business transactions are propagated to the eventual consistency world.\n* **Messaging as a service** is the core backbone of the architecture to support  any type of asynchronous communication:\n\n    * [IBM MQ](https://www.ibm.com/cloud/mq): delivers the exatly one delivery, strong consistency and support queuing and pub/sub protocol. MQ brokers in cluster support high availability cross data centers to build event-mesh. IBM MQ will be the unique technology to guarantee the end to end message availability.\n    * [IBM Event Streams](https://www.ibm.com/cloud/event-streams): provides an event backbone supporting Pub/Sub protocol only, with immutable append log. Event Streams is based on [Apache Kafka](https://kafka.apache.org/) and can run on-premise or as [managed services](https://cloud.ibm.com/catalog/services/event-streams)\n\n* **Reactive cloud native applications**: The top row represents modern applications which adopt the [reactive manifesto](https://www.reactivemanifesto.org/) as a way to be resilient, elastic and message driven. To reduce microservice to microservice dependency and reduce coupling, modern microservices are \n[event-driven](../../concepts/terms-and-definitions/#microservices) and \nimplemented with reactive framework (e.g. vert.x )and reactive messaging (e.g. microprofile 3.0 reactive messaging). Some of those applications can be function and serverless apps, meaning scaling to zero and being\nable to wake-up on event arrival. Finally it is important to note that business process applications running in BPM can be triggered\nby event arrival, can generate intermediate events, and can generate events at the process completion. Those business events are important to shared\nwith other applications to being expose to event backbone.\n* The adoption of Kafka as a way to support event backbone capability, also means that records can be saved for a long period of time, but it is relevant to be able to persist those records\nor an aggregate view of those records to a data lake or a set of s3 buckets. So most of EDA has sink connectors to data lake. \n* The governance of these asynchronous applications is becoming a major requirement when the adoption of such architecture grows. AsyncAPI, combined with schema registry\nhelps defining the intercommunication contracts. While most of the event-driven microservices are exposing Open APIs, enforced by API gateway, it is now \npossible to do the same enforcement and monitoring with the [event endpoint gateway](https://community.ibm.com/community/user/integration/blogs/dale-lane1/2021/04/12/a-demo-of-event-endpoint-management).\n* The bottom row supports new types of application for **data streaming**: the first set of applications \nare for getting business insight of the event sequencing by looking at event patterns as supported\nby the complex event processing engine (Apache Flink), and the second type are to process near-real time analytics to \ncompute analytical processing across multiple event streams. The technologies of choice are [Apache Flink](/technology/flink) and [IBM SQL query](https://www.ibm.com/cloud/sql-query).\nThose applications are also cloud native, and run in container deployable inside Kubernetes clusters.\n\nThis reference architecture is illustrated in the implementation of two solutions: [the shipping goods over sea solution](https://ibm-cloud-architecture.github.io/refarch-kc/) and the [vaccine at scale](https://ibm-cloud-architecture.github.io/vaccine-solution-main/) solution.\n\n## Extended Architecture\n\nThe architecture  presented in previous section, supports new data ingestion capability and new data sharing plaform.\n\nevent-driven reference architecture provides the framework to support event-driven applications and solutions. The extended architecture provides the connections for:\n\n  * Integration with legacy apps and data resources\n  * Integration with analytics or machine learning to derive near real-time insights\n\nThe diagram below shows how these capabilities fit together to form an extended event-driven architecture.\n\n![hl-arch-ra-adv](../../images/hl-arch-ra-adv.png)\n\n In 7. the AI workbench includes tools to do data analysis and visualization, build training and test sets from any datasource and in particular Event Store, and develop models. Models are pushed to streaming analytics component.\n\n\n## Integration with analytics and machine learning\n\nThe extended architecture extends the basic EDA reference architecture with concepts showing how data science, artificial intelligence and machine learning can be incorporated into an event-driven solution. The following diagram illustrats the event sources on the left injecting events to topics where green components are consuming from. Those components apply filtering, compute aggregates and stateful operation with time window based rules. Some of those components can include training scoring model, to do for example anomaly detection. The model is built with data scientist workbench tool, like Watson Studio.\n\n ![2](../../images/hl-arch-rt-analytics.png)\n\nThe starting point for data scientists to be able to derive machine learning models or analyze data for trends and behaviors is the existence of the data in a form that they can be consumed. For real-time intelligent solutions, data scientists typically inspect event histories and decision or action records from a system. Then, they reduce this data to some simplified model that scores new event data as it arrives.\n\n### Getting the data for the data scientist:\n\nWith near real-time event streams, the challenge is in handling unbounded data or a continuous flow of events. To make this consumable for the data scientist you need to capture the relevant data and store it so that it can be pulled into the analysis and model-building process as required.\n\nFollowing our event-driven reference architecture the event stream would be a Kafka topic on the event backbone.  From here there are two possibilities for making that event data available and consumable to the data scientist:\n\n* The event stream or event log can be accessed directly through Kafka and pulled into the analysis process\n* The event stream can be pre-processed by the streaming analytics system and stored for future use in the analysis process. You have a choice of store type to use. Within public IBM cloud object storage [Cloud Object Store](https://www.ibm.com/cloud/object-storage) can be used as a cost-effective historical store.\n\nBoth approaches are valid, pre-processing through streaming analytics provides opportunity for greater manipulation of the data, or storing data over time windows for complex event processing. However, the more interesting distinction is where you use a predictive (ML model) to score arriving events or stream data in real time. In this case you may use streaming analytics to extract and save the event data for analysis, model building, and model training and also for scoring (executing) a derived model in line in the real time against arriving event data.\n\n* The event and decision or action data is made available in cloud object storage for model building through streaming analytics.\n* Models may be developed by tuning and parameter fitting, standard form fitting, classification techniques, and text analytics methods.\n* Increasingly artificial intelligence (AI) and machine learning (ML) frameworks are used to discover and train useful predictive models as an alternative to parameterizing existing model types manually.\n* These techniques lead to process and data flows where the predictive model is trained offline using event histories from the event and the decision or action store possibly augmented with some supervisory outcome labelling, as illustrated by the paths from the `Event Backbone` and `Stream Processing` store into `Learn/Analyze`.\n* A model trained in this way includes some “scoring” API that can be invoked with fresh event data to generate a model-based prediction for future behavior and event properties of that specific context.\n* The scoring function is then easily reincorporated into the streaming analytics processing to generate predictions and insights.\n\nThese combined techniques can lead to the creation of near real-time intelligent applications:\n\n1. Event-driven architecture\n2. Identification of predictive insights using event storming methodology\n3. Developing models for these insights using machine learning\n4. Near real-time scoring of the insight models using a streaming analytics processing framework\n\nThese are scalable easily extensible, and adaptable applications responding in near real time to new situations. There are easily extended to build out and evolve from an initial minimal viable product (MVP) because of the loose coupling in the event-driven architecture, , and streams process domains.\n\n### Data scientist workbench\n\nTo complete the extended architecture for integration with analytics and machine learning, consider the toolset and frameworks that the data scientist can use to derive the models.  [Watson Studio](https://www.ibm.com/marketplace/watson-studio)  provides tools for data scientists, application developers, and subject matter experts to collaboratively and easily work with data to build and train models at scale.\n\nFor more information see [Getting started](https://dataplatform.cloud.ibm.com/docs/content/getting-started/overview-ws.html) with Watson Studio.\n\n## Modern Data Lake\n\nOne of the standard architecture to build data lake is the lambda architecture with data injection, stream processing, batch processing to data store and then queries as part of the service layer. It is designed to handle massive quantities of data by taking advantage of both batch and stream processing methods. Lambda architecture depends on a data model with an append-only, immutable data source that serves as a system of record. The batch layer precomputes results using a distributed processing system that can handle very large quantities of data. Output from the batch and speed layers are stored in the serving layer, which responds to ad-hoc queries by returning precomputed views or building views from the processed data.\n\nThe following figure is an enhancement of the lambda architecture with the adoption of Kafka as event backbone for data pipeline and source of truth and streaming processing to support real time analytics and streaming queries.\n\n ![3](../../images/data-lake-1.png)\n\nOn the left the different data sources, injected using different protocols like MQTT, HTTP, or Kafka Connect... The business applications are supported by different microservices that are exposed by APIs and event-driven. The APIs is managed by API management product. Business events are produced as facts about the business entities, and persisted in the append log of kafka topic. Transactional data can be injected from MQ queues to Kafka topic, via MQ connectors. \n\nThe data platform offers a set of capabilities to expose data for consumers like Data Science workbench (Watson Studio) via virtualization and data connections. The data are cataloged and governed to ensure integrity and visibility. The storage can be block based, document oriented or table oriented.\n\nBatch queries and map reduce can address huge data raw, while streaming queries can support real time aggregates and analytics.\n\n## Legacy Integration\n\nWhile you create new digital business applications as self-contained systems, you likely need to integrate legacy apps and databases into the event-driven system. Two ways of coming directly into the event-driven architecture are as follows:\n\n1. Where legacy applications are connected with MQ. You can connect directly from MQ to the Kafka in the event backbone.  See [IBM Event Streams getting started with MQ article](https://ibm.github.io/event-streams/connecting/mq/). The major idea here is to leverage the transactionality support of MQ, so writing to the databased and to the queue happen in the same transaction:\n\n ![3](../../images/hl-arch-data-pipe-mq.png)\n\n2. Where databases support the capture of changes to data, you can publish changes as events to Kafka and hence into the event infrastructure. This could leverage the [outbox pattern](/patterns/intro/#transactional-outbox) where events are prepared by the application and written, in the same transaction as the other tables, and read by the CDC capture agent.\n\n ![4](../../images/hl-arch-data-pipe-cdc.png)\n\nOr use an efficient CDC product to get the change data capture at the transaction level. IBM offers the best CDC product on the market, ([InfoSphere Data Replication 11.4.0](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.idr.frontend.doc/pv_welcome.html)), with subsecond average latency and support full transactional semantics with exactly once consumption. It includes an [efficient Kafka integration](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/systemrequirements.html). \n\nOne of the challenges of basic CDC products, is the replication per table pattern, leads to retry to rebuild the transaction integrity using kafka stream to join data from multiple topics. The [TCC (Transactionally consistent consumer) technology](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/kafkatcc.html) allows Kafka replication to have semantics similar to a relational database. This dramatically increases the types of business logic that can be implemented. Developer can recreate the order of operations in source transactions across multiple Kafka topics and partitions and consume Kafka records that are free of duplicates by including the Kafka transactionally consistent consumer library in your Java applications. \nTCC allows:\n\n* Elimination of any duplicates, even in abnormal termination scenarios\n* Reconstruction of exact transaction order, despite those transactions having been performance optimized and applied out of order to Kafka\n* Reconstruction of exact operation order within a transaction, despite said operations having been applied to different topics and/or partitions.  This is not offered by default Kafka's \"exactly once\" functionality\n* Ability for hundreds+ producers to participate in a single transaction.  Kafka's implementation has one producer create all messages for a transaction, despite those messages going to different topics.\n* Provides a unique bookmark, so that downstream applications can check-point and resume exactly where they last left off if they fail.\n\n*We recommend listeing to this presentation from Shawn Roberston - IBM, on [A Solution for Leveraging Kafka to Provide End-to-End ACID Transactions](https://www.confluent.io/kafka-summit-sf18/a-solution-for-leveraging-kafka-to-provide-end-to-end-acid-transactions/)*\n\nThe second, very important, feature is on the producer side, with the Kafka custom operation processor (or KCOP) infrastructure. KCOP helps you to control over the Kafka producer records that are written to Kafka topics in response to insert, update, and delete operations that occur on source database tables. It allows a user to programmatically dictate the exact key an byte values of the message written to Kafka. Therefore any individual row transformation message encoding format is achievable. Out of the box it includes Avro, CSV, JSON message encoding formats. It is possible to perform column level RSA encryption on certain values before writing.\nIt also permits enriching of the message with additional annotation if needed.\nDevelopers have the complete choice over how data is represented. Eg. Can write data in Kafka Compaction compliant format with deletes being represented as Kafka tombstones or can write the content of the message being deleted.\n\nIt also supports Kafka Header fields for efficient downstream routing without the need for immediate de-serialization.\nThe KCOP allows a user to determine how many messages are written to Kafka in response to a source operation, the content of the messages, and their destination.\n* Allows for filtering based on column values.\n* Allows for writing the entire row with sensitive data to highly restricted topics and a subset of the columns to wider shared topics.\n* Allows for writing the same message in two different formats to two different topics.  Useful in environments where some consuming applications want JSON, others prefer Avro, both can be produced in parallel if desired.\n* Allows for sending special flags to a monitoring topic.  Eg. when a transaction exceeds $500, in addition to the regular message, a special topic is written to notifying of the large value transaction\n\n\nThe two diagrams above, illustrate a common architecture for data pipeline, using event backbone, where the data is transformed into different data model, that can be consumed by components that act on those data, and move the data document into data lake for big data processing.\n\nFinally it is important to note that the deployment of the event streams, CDC can be colocated in the mainframe to reduce operation and runtime cost. It also reduces complexity. In the following diagram, event stream brokers are deployed on OpenShift on Linux on Z and the CDC servers on Linux too.\n\n ![6](../../images/es-on-z-deployment.png)\n \nThis architecture pattern try to reduce the MIPs utilization on the mainframe to the minimum by still ensuring data pipeline, with transactional integrity. \n\n* Quality of Service – autoscaling / balancing between Linux nodes, Resilience.\n* Latency  - memory speed (Network ->  HiperSocket, with memory speed and bandwidth)\n* Reduce MIPS  (avoid Authentication-TLS overhead on z/OS as no network traffic is encrypted)\n* Avoid network spend / management / maintenance between servers\n* Improved QoS for the Kafka service – inherits Z platform  (Event Streams is the only Kafka variant currently supported on Linix on Z) \n* Reduced complexity / management cost\n* Reduced latency / network infrastructure (apply – Kafka hop is now  in memory) – avoids need for encryption \n\nThe CDC server uses [Transaction Capture Consumer](https://www.ibm.com/support/knowledgecenter/SSTRGZ_11.4.0/com.ibm.cdcdoc.cdckafka.doc/concepts/kafkatcc.html) to keep transaction integrity while publishing to kafka topic. CICS Business events are mechanism for declaratively emitting event from CICS routines.\n\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/introduction/reference-architecture/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}