{"componentChunkName":"component---src-pages-concepts-integration-index-mdx","path":"/concepts/integration/","result":{"pageContext":{"frontmatter":{"title":"Integration reference architecture","description":"Working notes for agile integration reference architecture"},"relativePagePath":"/concepts/integration/index.mdx","titleType":"append","MdxNode":{"id":"93dfb1db-d673-5246-8980-3e233406bb92","children":[],"parent":"98f1ecd6-92ab-51b5-b398-42fa4f6f245b","internal":{"content":"---\ntitle: Integration reference architecture\ndescription: Working notes for agile integration reference architecture\n---\n\nEvent driven architecture is a complement of integration reference architecture as [presented in IBM Cloud architecture center](https://www.ibm.com/cloud/architecture/architectures/modern-integration/overview).\n\nIn this note we want to summarize some of the important aspects of agile integration and how some of the technologies delivered as part of IBM Cloud Pak for Integration are used in our different labs and reference implementations.\n\nFirst let do a quick review of the major concept for agile integration.\n\n## Agile integration concepts\n\nThis section presents the key points developed in detail in the [IBM cloud on agile integration article](https://www.ibm.com/cloud/integration/agile-integration):\n\n* empower extended teams to create integrations, leverages a complete set of integration styles and capabilities, and increases overall productivity.\n* agile integration—a container-based, decentralized, microservices-aligned approach for integrating solutions\n* centralized integration architectures cannot support the demand\n* ESB pattern provides standardized synchronous connectivity to back-end systems typically over web services. ESB formed a single infrastructure for the whole enterprise, with tens or hundreds of integrations installed on a production server cluster.\n* A single, centralized ESB certainly simplifies consistency and governance of implementation.\n* Interface maintenance is expensive.\n* Any deployment to the shared servers runs the risk of destabilizing existing critical interfaces.\n* SOA encounters the issue of who to fund enterprise wide program interface.\n* Integration teams are the bottleneck instead of being enabler.\n* SOA is about real-time integration between applications, whereas a microservices architecture is about how the applications are built internally.\n* microservice enables greater agility:\n   * small enough to be understood completely by their owning team and changed independently\n   * Elastic scalability\n   * Discrete resilience: changes to one microservice will not affect others at runtime\n\n* Three aspects to agile integration:\n\n    1. **Decentralized integration ownership**: give application teams more control over the creation and exposure of their own integration exposed as APIs, or messages\n    1. **Fine-grained integration deployment** to separate integration, scalable independently. Changes to individual integration flows can be automatically rebuilt and deployed independently of other flows to enable safer application of changes and maximize speed to production.\n    1. **Cloud-native integration infrastructure** to improve productivity, operational consistency and portability for both applications and integration\n\n## Cloud Pak for Integration capabilities relevant to this site\n\n### API management\n\n* easier to discover new business assets (APIs and events) in current enterprise systems\n* existing enterprise assets are made available to new channels and new audiences, with enriched customer experience in integrated omnichannel interactions\n\n### App connect\n\nConnect applications and data sources on premises or in the cloud to coordinate the exchange of business information so that data is available when and where it’s needed.\n\nCapabilities:\n\n* Low-code/no-code integration tooling leverages natural language processing (NLP) and AI to offer custom mapping suggestions when building integration flows.\n* Pre-built smart connectors and a common, shareable asset repository increases speed of delivery and eliminates concerns about mismatched sources, formats, or standards\n\n#### Labs\n\n* [Secure API, App connect and MQ](https://www.ibm.com/cloud/garage/dte/tutorial/unlock-your-enterprise-data-using-secure-apis-app-integration-flows-and-reliable-messaging): older version of the UI in screen shots\n\n### Messaging\n\nMessaging is to support asynchronous communication between applications. Two technologies are part of the reference architecture, queuing and pub/sub.\n\n#### IBM MQ\n\nSee a technology summary in [this note](/technology/mq/) and this [MQ to Kafka lab](/use-cases/connect-mq/). \n\n#### Kafka based product \n\nThis site includes a lot of content around Kafka [(see this technology summary)](/technology/kafka-overview/), but the major capabilities of interest in term of agile integration is the pub/sub model, long term persistence via append log and replication to support high availability and resiliency, with data streaming logic, and a lot of connectors to source data or sink data to external systems. \n\nKafka scale and is a reliable messaging system for modern event-driven microservice solution.\n\n## Bridge your digital ecosystem and core enterprise\n\nAt a high level, modern integration involves bridging the capabilities between your digital ecosystem and your traditional core enterprise. The bridging takes place in a seamless, frictionless way so that you can uniformly operate your entire business anytime, anywhere, regardless of technological fluctuations.\n\nIn your digital transformation journey, your digital ecosystem and your core enterprise constantly change. You need a set of integration capabilities to support rapid change to interface, develop new business oriented integration flow to consume cloud services and software as a service, get visibility to the data in motion, integrate with existing transactional systems and system of record. \n\n![](./images/digital-to-core.png)\n\nYou modern cloud native applications use microservice design, function as a service, and may use agile, no code, integration logic to integrate with existing systems, SOA services, or cloud based services. Modern applications are reusing public cloud services, like CRM application, Database as a service, Chat bot as a services... Those services can be offered by different cloud providers, and architects will select the best services according to their requirements and cost / benefits analysis. A unique cloud provider will not have all the best useful services, and hybrid cloud is a standard approach in the 2020s. What is important is to get a set of tool that makes the integration easy to do with simple configuration to integrate with the needed data and inject those data in the operational messaging system for other to consumer. This agile integration follows the same DevOps pattern as other microservices. \n\nThe messaging layer can support point to point, request/reply type of communication, or a pub/sub model with long retention time, and data streams processing. This data injection layer can be a [buffer to modern data lake](/introduction/reference-architecture/#modern-data-lake).\n\nFinally existing applications, system of records, transactional systems have to be integrated, consumed and accessed from modern applications, with new digital channel like mobile and single page web application.  \n\nAPI management is an important elements of the integration, to manage and provide API economy but also secure access to internal systems, with controlled traffic. This is the role of the API gateway.\n\n\n## Optimize your integration platform\n\nA vendor neutral hybrid cloud, that uses open standards and container orchestration technology, presents the optimal platform for modern integration. It addresses multicloud operations, different deployment options, and integration patterns within a modular and scalable environment.\n\nAs shown in the diagram below, the integration platform must accommodate many integration patterns and have that support ready on demand and as a self-service model.\n\n![](./images/integration-platform.png)\n\n* API integration enables synchronous access to fine-grained services, such as create, retrieve, update, and delete operations to business objects across various backends. Thus, the composition of the integration logic on the consumer side. Modern API management also includes the management of AsynchAPI for messaging systems and asynchronous communication between event-driven microservices.\n\n* Application data integration enables synchronous access to coarse-grained services such as transaction processing across various backends in accordance with enterprise compliance requirements. Thus, the governance of integration logic on the provider side.\n\n* Enterprise messaging enables asynchronous point-to-point access to services such as those that involve closed heritage systems, transactional integrity systems or heterogeneous partner backends.\n\n* Event publish/subscribe integration enables asynchronous many-to-many coordination of services across both cloud and on-premises components in an event-driven architecture context.\n\n* File transfer enables batch integration between SORs that involves the movement of large data files for content across vast physical distances within short time windows.\n\nThe integration platform must provide a unified framework for security, management operations, and resiliency. The container orchestration platform provides resiliency through the elasticity of container clusters and platform-level security. The unified management component provides ease of operations with a single view across all integration components within the platform. The gateway services provide runtime-level security and enforce access control policies to integration services.","type":"Mdx","contentDigest":"930dc595cd762f7deed3753fb98a68f6","counter":700,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Integration reference architecture","description":"Working notes for agile integration reference architecture"},"exports":{},"rawBody":"---\ntitle: Integration reference architecture\ndescription: Working notes for agile integration reference architecture\n---\n\nEvent driven architecture is a complement of integration reference architecture as [presented in IBM Cloud architecture center](https://www.ibm.com/cloud/architecture/architectures/modern-integration/overview).\n\nIn this note we want to summarize some of the important aspects of agile integration and how some of the technologies delivered as part of IBM Cloud Pak for Integration are used in our different labs and reference implementations.\n\nFirst let do a quick review of the major concept for agile integration.\n\n## Agile integration concepts\n\nThis section presents the key points developed in detail in the [IBM cloud on agile integration article](https://www.ibm.com/cloud/integration/agile-integration):\n\n* empower extended teams to create integrations, leverages a complete set of integration styles and capabilities, and increases overall productivity.\n* agile integration—a container-based, decentralized, microservices-aligned approach for integrating solutions\n* centralized integration architectures cannot support the demand\n* ESB pattern provides standardized synchronous connectivity to back-end systems typically over web services. ESB formed a single infrastructure for the whole enterprise, with tens or hundreds of integrations installed on a production server cluster.\n* A single, centralized ESB certainly simplifies consistency and governance of implementation.\n* Interface maintenance is expensive.\n* Any deployment to the shared servers runs the risk of destabilizing existing critical interfaces.\n* SOA encounters the issue of who to fund enterprise wide program interface.\n* Integration teams are the bottleneck instead of being enabler.\n* SOA is about real-time integration between applications, whereas a microservices architecture is about how the applications are built internally.\n* microservice enables greater agility:\n   * small enough to be understood completely by their owning team and changed independently\n   * Elastic scalability\n   * Discrete resilience: changes to one microservice will not affect others at runtime\n\n* Three aspects to agile integration:\n\n    1. **Decentralized integration ownership**: give application teams more control over the creation and exposure of their own integration exposed as APIs, or messages\n    1. **Fine-grained integration deployment** to separate integration, scalable independently. Changes to individual integration flows can be automatically rebuilt and deployed independently of other flows to enable safer application of changes and maximize speed to production.\n    1. **Cloud-native integration infrastructure** to improve productivity, operational consistency and portability for both applications and integration\n\n## Cloud Pak for Integration capabilities relevant to this site\n\n### API management\n\n* easier to discover new business assets (APIs and events) in current enterprise systems\n* existing enterprise assets are made available to new channels and new audiences, with enriched customer experience in integrated omnichannel interactions\n\n### App connect\n\nConnect applications and data sources on premises or in the cloud to coordinate the exchange of business information so that data is available when and where it’s needed.\n\nCapabilities:\n\n* Low-code/no-code integration tooling leverages natural language processing (NLP) and AI to offer custom mapping suggestions when building integration flows.\n* Pre-built smart connectors and a common, shareable asset repository increases speed of delivery and eliminates concerns about mismatched sources, formats, or standards\n\n#### Labs\n\n* [Secure API, App connect and MQ](https://www.ibm.com/cloud/garage/dte/tutorial/unlock-your-enterprise-data-using-secure-apis-app-integration-flows-and-reliable-messaging): older version of the UI in screen shots\n\n### Messaging\n\nMessaging is to support asynchronous communication between applications. Two technologies are part of the reference architecture, queuing and pub/sub.\n\n#### IBM MQ\n\nSee a technology summary in [this note](/technology/mq/) and this [MQ to Kafka lab](/use-cases/connect-mq/). \n\n#### Kafka based product \n\nThis site includes a lot of content around Kafka [(see this technology summary)](/technology/kafka-overview/), but the major capabilities of interest in term of agile integration is the pub/sub model, long term persistence via append log and replication to support high availability and resiliency, with data streaming logic, and a lot of connectors to source data or sink data to external systems. \n\nKafka scale and is a reliable messaging system for modern event-driven microservice solution.\n\n## Bridge your digital ecosystem and core enterprise\n\nAt a high level, modern integration involves bridging the capabilities between your digital ecosystem and your traditional core enterprise. The bridging takes place in a seamless, frictionless way so that you can uniformly operate your entire business anytime, anywhere, regardless of technological fluctuations.\n\nIn your digital transformation journey, your digital ecosystem and your core enterprise constantly change. You need a set of integration capabilities to support rapid change to interface, develop new business oriented integration flow to consume cloud services and software as a service, get visibility to the data in motion, integrate with existing transactional systems and system of record. \n\n![](./images/digital-to-core.png)\n\nYou modern cloud native applications use microservice design, function as a service, and may use agile, no code, integration logic to integrate with existing systems, SOA services, or cloud based services. Modern applications are reusing public cloud services, like CRM application, Database as a service, Chat bot as a services... Those services can be offered by different cloud providers, and architects will select the best services according to their requirements and cost / benefits analysis. A unique cloud provider will not have all the best useful services, and hybrid cloud is a standard approach in the 2020s. What is important is to get a set of tool that makes the integration easy to do with simple configuration to integrate with the needed data and inject those data in the operational messaging system for other to consumer. This agile integration follows the same DevOps pattern as other microservices. \n\nThe messaging layer can support point to point, request/reply type of communication, or a pub/sub model with long retention time, and data streams processing. This data injection layer can be a [buffer to modern data lake](/introduction/reference-architecture/#modern-data-lake).\n\nFinally existing applications, system of records, transactional systems have to be integrated, consumed and accessed from modern applications, with new digital channel like mobile and single page web application.  \n\nAPI management is an important elements of the integration, to manage and provide API economy but also secure access to internal systems, with controlled traffic. This is the role of the API gateway.\n\n\n## Optimize your integration platform\n\nA vendor neutral hybrid cloud, that uses open standards and container orchestration technology, presents the optimal platform for modern integration. It addresses multicloud operations, different deployment options, and integration patterns within a modular and scalable environment.\n\nAs shown in the diagram below, the integration platform must accommodate many integration patterns and have that support ready on demand and as a self-service model.\n\n![](./images/integration-platform.png)\n\n* API integration enables synchronous access to fine-grained services, such as create, retrieve, update, and delete operations to business objects across various backends. Thus, the composition of the integration logic on the consumer side. Modern API management also includes the management of AsynchAPI for messaging systems and asynchronous communication between event-driven microservices.\n\n* Application data integration enables synchronous access to coarse-grained services such as transaction processing across various backends in accordance with enterprise compliance requirements. Thus, the governance of integration logic on the provider side.\n\n* Enterprise messaging enables asynchronous point-to-point access to services such as those that involve closed heritage systems, transactional integrity systems or heterogeneous partner backends.\n\n* Event publish/subscribe integration enables asynchronous many-to-many coordination of services across both cloud and on-premises components in an event-driven architecture context.\n\n* File transfer enables batch integration between SORs that involves the movement of large data files for content across vast physical distances within short time windows.\n\nThe integration platform must provide a unified framework for security, management operations, and resiliency. The container orchestration platform provides resiliency through the elasticity of container clusters and platform-level security. The unified management component provides ease of operations with a single view across all integration components within the platform. The gateway services provide runtime-level security and enforce access control policies to integration services.","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/concepts/integration/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}