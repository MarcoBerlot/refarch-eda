{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/technology/index.mdx"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-technology-index-mdx-5a495ba5d40e5e686893.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`We are presenting in this note how to get development and deployment environments to start developing Event Driven microservice solution. We assume OpensShift deployment and at first Java as the main programming language.`}</p>\n    <h2>{`Infrastructure for dev Integration test`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`OpenShift`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://docs.openshift.com/container-platform/4.5/welcome/index.html\"\n            }}>{`OpenShift Container Platform Installation Documentation`}</a>{` `}</li>\n          <li parentName=\"ul\">{`OpenShift Container Platform is flexible and can be installed in a number of different environments - onprem, cloud, and hybrid environments.`}</li>\n          <li parentName=\"ul\">{`OpenShift v4.4.x and newer is required for CP4I2020.2.1 (and subsequently Event Streams v10.0) and CP4Apps v4.2.x`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Cloud Pak Operators`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Add `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.ibm.com/support/knowledgecenter/SSGT7J_20.2/install/install_online_catalog_sources.html\"\n            }}>{`IBM Common Services operators`}</a>{` `}</li>\n          <li parentName=\"ul\">{`Add the IBM operators to the list of installable operators. Same product note as above.`}</li>\n          <li parentName=\"ul\">{`Get `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.ibm.com/support/knowledgecenter/SSGT7J_20.2/install/entitlement_key.html\"\n            }}>{`entitlement key`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Cloud Pak for Integration`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Install Cloud Pak for Integration operator using the Operator hub catalog`}</li>\n          <li parentName=\"ul\">{`Install Cloud Pak for Integration platform navigator from the operator hub catalog`}</li>\n          <li parentName=\"ul\">{`The previous steps should have installed the common services if they were not installed before. So get the admin password via the `}<inlineCode parentName=\"li\">{`platform-auth-idp-credentials`}</inlineCode>{` secret in the `}<inlineCode parentName=\"li\">{`ibm-common-services`}</inlineCode>{` project. `}<inlineCode parentName=\"li\">{` oc get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode`}</inlineCode></li>\n          <li parentName=\"ul\">{`More information on `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.ibm.com/support/knowledgecenter/SSGT7J_20.2/install/install.html\"\n            }}>{`CP4I Installation`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Cloud Pak for Application`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can either install Cloud Pak for Applications via the `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.ibm.com/support/knowledgecenter/SSCSJL_4.1.x/install-icpa-cli.html\"\n            }}>{`CLI`}</a>{` or the `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSCSJL_4.2.x/install-icpa-case.html\"\n            }}>{`cloudctl CASE launcher`}</a></li>\n          <li parentName=\"ul\">{`Like the Cloud Pak for Integration you will need a key for the entitled registry.`}</li>\n        </ul></li>\n    </ul>\n    <h3>{`Deploying Event Streams`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The instructions are in the `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.ibm.com/support/knowledgecenter/SSGT7J_20.2/install/install_event_streams.html\"\n          }}>{`product documentation`}</a>{`, and are very simple using the IBM Event Streams operator. Select minimal configuration with persistence. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Here is an example of the yaml. Note that there are a few sample yamls that come after you install the Event Streams Operator. This yaml is for Event Streams v10.0 -`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: eventstreams.ibm.com/v1beta1\nkind: EventStreams\nmetadata:\n  name: minimal-prod\n  namespace: cp4i\nspec:\n  version: 10.0.0\n  license:\n    accept: false\n    use: CloudPakForIntegrationProduction\n  adminApi: {}\n  adminUI: {}\n  collector: {}\n  restProducer: {}\n  schemaRegistry:\n    storage:\n      type: persistent-claim\n      size: 100Mi\n      class: enter-storage-class-name-here\n  strimziOverrides:\n    kafka:\n      replicas: 3\n      authorization:\n        type: runas\n      config:\n        inter.broker.protocol.version: '2.5'\n        interceptor.class.names: com.ibm.eventstreams.interceptors.metrics.ProducerMetricsInterceptor\n        log.cleaner.threads: 6\n        log.message.format.version: '2.5'\n        num.io.threads: 24\n        num.network.threads: 9\n        num.replica.fetchers: 3\n        offsets.topic.replication.factor: 3\n      listeners:\n        external:\n          type: route\n          authentication:\n            type: scram-sha-512\n        tls:\n          authentication:\n            type: tls\n      metrics: {}\n      storage:\n        type: persistent-claim\n        size: 4Gi\n        class: enter-storage-class-name-here\n    zookeeper:\n      replicas: 3\n      metrics: {}\n      storage:\n        type: persistent-claim\n        size: 2Gi\n        class: enter-storage-class-name-here\n`}</code></pre>\n    <h3>{`Deploy Strimzi`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://strimzi.io/\"\n        }}>{`Strimzi`}</a>{` is a very powerful and useful distributed Kafka deployment built for use with Kubernetes and OpenShift.`}</li>\n      <li parentName=\"ul\">{`On OpenShift Container Platform v4.0.x to 4.3.x as well as pre-Event Streams v10 the Strimzi Operator will serve most of our needs. It can serve as the base so that we can utilize technologies like KafkaConnect, KafkaConnectS2i, KafkaConnector, Mirror Maker2 and other Custom Resources.`}</li>\n      <li parentName=\"ul\">{`You can install it via `}<a parentName=\"li\" {...{\n          \"href\": \"https://strimzi.io/blog/2019/03/06/strimzi-and-operator-lifecycle-manager/\"\n        }}>{`Operator Hub`}</a></li>\n      <li parentName=\"ul\">{`You can also install the Strimzi and it’s `}<a parentName=\"li\" {...{\n          \"href\": \"https://strimzi.io/docs/operators/master/deploying.html#cluster-operator-str\"\n        }}>{`Cluster Operator`}</a>{` by applying a yaml file through CLI.`}</li>\n    </ul>\n    <h2>{`Java Developer Environment`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Go with `}<a parentName=\"li\" {...{\n          \"href\": \"http://quarkus.io\"\n        }}>{`Quarkus`}</a>{` so all being set with maven plugin.`}</li>\n      <li parentName=\"ul\">{`You can scaffold your application through the `}<a parentName=\"li\" {...{\n          \"href\": \"https://code.quarkus.io/\"\n        }}>{`Quarkus Web UI`}</a>{` which will allow you to pick and choose your project dependencies. You may also do it through the CLI like so: `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mvn io.quarkus:quarkus-maven-plugin:1.8.1.Final:create \\\\\n-DprojectGroupId=ibm.garage \\\\\n-DprojectArtifactId=your-application \\\\\n-Dextensions=\"kafka,kafka-streams,quarkus-kafka-streams\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`If you already have your project created and you know the name of an extension you want ot add, you can do it through the CLI like the following - `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw quarkus:add-extension -Dextensions=\"kafka\"\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here’s a very simple Quarkus Producer application utilizing MicroProfile Reactive Messaging that sends messages to Event Stream v10 and newer: `}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Producer.java`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.infrastructure;\n\nimport io.reactivex.Flowable;\nimport io.smallrye.reactive.messaging.kafka.KafkaRecord;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\nimport javax.enterprise.context.ApplicationScoped;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n\n/**\n * This class produces a message every 5 seconds.\n * The Kafka configuration is specified in the application.properties file.\n*/\n@ApplicationScoped\npublic class Producer {\n    private Random random = new Random();\n\n    @Outgoing(\"mock-producer\")      \n    public Flowable<KafkaRecord<Integer, String>> generate() {\n        return Flowable.interval(5, TimeUnit.SECONDS)    \n                .onBackpressureDrop()\n                .map(tick -> {      \n                    return KafkaRecord.of(random.nextInt(100), String.valueOf(random.nextInt(100)));\n                });\n    }                  \n}\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Now we have a simple Quarkus consumer, also using MicroProfile Reactive Messaging and printing the message.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Consumer.java`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.ibm.garage.infrastructure;\n\nimport io.quarkus.runtime.ShutdownEvent;\nimport io.quarkus.runtime.StartupEvent;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Observes;\n\n@ApplicationScoped\npublic class Consumer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(Consumer.class);\n\n    @Incoming(\"mock-consumer\")\n    public void consumingMessage(String incomingMessage) {\n        LOGGER.info(\"Message received from topic = {}\", incomingMessage);\n        //System.out.println(incomingMessage);\n    }\n    \n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Quarkus does it’s configuration via an `}<inlineCode parentName=\"li\">{`application.properties`}</inlineCode>{` file within the `}<inlineCode parentName=\"li\">{`src/main/resources/`}</inlineCode>{` path. A sample properties file.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`quarkus.http.port=8080\nquarkus.log.console.enable=true\nquarkus.log.console.level=INFO\n\n# Base ES Connection Details\nmp.messaging.connector.smallrye-kafka.bootstrap.servers=\\${BOOTSTRAP_SERVERS}\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \\\\\n                username=\\${SCRAM_USERNAME} \\\\\n                password=\\${SCRAM_PASSWORD};\nmp.messaging.connector.smallrye-kafka.ssl.truststore.location=\\${CERT_LOCATION}\nmp.messaging.connector.smallrye-kafka.ssl.truststore.password=\\${CERT_PASSWORD}\nmp.messaging.connector.smallrye-kafka.ssl.truststore.type=PKCS12\n\n\n# mock message producer configuration\nmp.messaging.outgoing.mock-producer.connector=smallrye-kafka\nmp.messaging.outgoing.mock-producer.topic=\\${TOPIC_NAME}\nmp.messaging.outgoing.mock-producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.mock-producer.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Kafka Streams consumer configuration\nmp.messaging.incoming.mock-consumer.connector=smallrye-kafka\nmp.messaging.incoming.mock-consumer.topic=\\${TOPIC_NAME}\nmp.messaging.incoming.mock-consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.mock-consumer.key.deerializer=org.apache.kafka.common.serialization.IntegerDeserializer\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`There are a few environment variables we need to pass to our properties before we can run it. Replace the values which can be retrieved from the Event Streams on CP4I UI.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export BOOTSTRAP_SERVERS=your-external-bootstrap-address:xxxx \\\\\nexport SCRAM_USERNAME=your-scram-username \\\\\nexport SCRAM_PASSWORD=your-scram-password \\\\\nexport TOPIC_NAME=your-topic \\\\\nexport CERT_LOCATION=/your-path-to-cert/es-cert.p12 \\\\\nexport CERT_PASSWORD=your-cert-password\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To run your applications run the following which will allow hot-reloading (if that’s a functionality you need)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./mvnw quarkus:dev\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Kafka Strimzi image for docker and docker-compose to get up and running quickly. We have different docker composes files for you to start with:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`One Broker, one Zookeeper, kafka 2.5`}</li>\n          <li parentName=\"ul\">{`TODO`}</li>\n        </ul></li>\n    </ul>\n    <h2>{`Python Developer Environment`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`There are a few Python packages but the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/confluentinc/confluent-kafka-python\"\n        }}>{`Confluent Kafka Python`}</a>{` package can serve our needs.`}</li>\n      <li parentName=\"ul\">{`For Python environments you can use the Confluent Python package and install the dependency with pip.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`pip install confluent-kafka`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`The following is a very simple Python Producer that will serve as the scaffold:`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`KafkaProducer.py`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json, os\nfrom confluent_kafka import KafkaError, Producer\n\nclass KafkaProducer:\n\n    def __init__(self, groupID = \"KafkaProducer\"):\n        # Get the producer configuration\n        self.producer_conf = self.getProducerConfiguration(groupID)\n        # Create the producer\n        self.producer = Producer(self.producer_conf)\n\n    def getProducerConfiguration(self,groupID):\n        try:\n            options ={\n                    'bootstrap.servers': os.environ['KAFKA_BROKERS'],\n                    'group.id': groupID\n            }\n            if (os.getenv('KAFKA_PASSWORD','') != ''):\n                # Set security protocol common to ES on prem and on IBM Cloud\n                options['security.protocol'] = 'SASL_SSL'\n                # Depending on the Kafka User, we will know whether we are talking to ES on prem or on IBM Cloud\n                # If we are connecting to ES on IBM Cloud, the SASL mechanism is plain\n                if (os.getenv('KAFKA_USER','') == 'token'):\n                    options['sasl.mechanisms'] = 'PLAIN'\n                # If we are connecting to ES on OCP, the SASL mechanism is scram-sha-512\n                else:\n                    options['sasl.mechanisms'] = 'SCRAM-SHA-512'\n                # Set the SASL username and password\n                options['sasl.username'] = os.getenv('KAFKA_USER','')\n                options['sasl.password'] = os.getenv('KAFKA_PASSWORD','')\n            # If we are talking to ES on prem, it uses an SSL self-signed certificate.\n            # Therefore, we need the CA public certificate for the SSL connection to happen.\n            if (os.path.isfile(os.getenv('KAFKA_CERT','/certs/es-cert.pem'))):\n                options['ssl.ca.location'] = os.getenv('KAFKA_CERT','/certs/es-cert.pem')\n            \n            # Print out the producer configuration\n            self.printProducerConfiguration(options)\n\n            return options\n\n        except KeyError as error:\n            print('[KafkaProducer] - [ERROR] - A required environment variable does not exist: ' + error)\n            exit(1)\n\n    def printProducerConfiguration(self,options):\n        # Printing out producer config for debugging purposes        \n        print(\"[KafkaProducer] - This is the configuration for the producer:\")\n        print(\"[KafkaProducer] - -------------------------------------------\")\n        print('[KafkaProducer] - Bootstrap Server:      {}'.format(options['bootstrap.servers']))\n        if (os.getenv('KAFKA_PASSWORD','') != ''):\n            # Obfuscate password\n            if (len(options['sasl.password']) > 3):\n                obfuscated_password = options['sasl.password'][0] + \"*****\" + options['sasl.password'][len(options['sasl.password'])-1]\n            else:\n                obfuscated_password = \"*******\"\n            print('[KafkaProducer] - Security Protocol:     {}'.format(options['security.protocol']))\n            print('[KafkaProducer] - SASL Mechanism:        {}'.format(options['sasl.mechanisms']))\n            print('[KafkaProducer] - SASL Username:         {}'.format(options['sasl.username']))\n            print('[KafkaProducer] - SASL Password:         {}'.format(obfuscated_password))\n            if (os.path.isfile(os.getenv('KAFKA_CERT','/certs/es-cert.pem'))): \n                print('[KafkaProducer] - SSL CA Location:       {}'.format(options['ssl.ca.location']))\n        print(\"[KafkaProducer] - -------------------------------------------\")\n\n    def delivery_report(self,err, msg):\n        \"\"\" Called once for each message produced to indicate delivery result. Triggered by poll() or flush(). \"\"\"\n        if err is not None:\n            print('[KafkaProducer] - [ERROR] - Message delivery failed: {}'.format(err))\n        else:\n            print('[KafkaProducer] - Message delivered to {} [{}]'.format(msg.topic(), msg.partition()))\n\n    def publishEvent(self, topicName, eventToSend, keyName):\n        # Print the event to send\n        dataStr = json.dumps(eventToSend)\n        # Produce the message\n        self.producer.produce(topicName,key=eventToSend[keyName],value=dataStr.encode('utf-8'), callback=self.delivery_report)\n        # Flush\n        self.producer.flush()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Now that we have the Producer we need to actually send Events.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`ProducePlainMessage.py`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import argparse\nfrom KafkaProducer import KafkaProducer\n\nif __name__ == '__main__':\n\n    # Parse arguments\n    parser = argparse.ArgumentParser(description=\"Message Producer Example\")\n    parser.add_argument('-t', dest=\"topic\", required=True, help=\"Topic name\")\n    args = parser.parse_args()\n    \n    # Create the event to be sent\n    event = {\"eventKey\" : \"1\", \"message\" : \"This is a test message\"}\n    \n    # Print it out\n    print(\"--- Event to be published: ---\")\n    print(event)\n    print(\"----------------------------------------\")\n    \n    # Create the Kafka Producer\n    kafka_producer = KafkaProducer()\n    # Publish the event\n    kafka_producer.publishEvent(args.topic,event,\"eventKey\")\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The following is a simple Python consumer`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`KafkaConsumer.py`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json,os\nfrom confluent_kafka import Consumer, KafkaError\n\n\nclass KafkaConsumer:\n\n    def __init__(self, topic_name = \"kafka-producer\", groupID = 'KafkaConsumer', autocommit = True):\n        # Get the consumer configuration\n        self.consumer_conf = self.getConsumerConfiguration(groupID, autocommit)\n        # Create the Avro consumer\n        self.consumer = Consumer(self.consumer_conf)\n        # Subscribe to the topic\n        self.consumer.subscribe([topic_name])\n\n    def getConsumerConfiguration(self, groupID, autocommit):\n        try:\n            options ={\n                    'bootstrap.servers': os.environ['KAFKA_BROKERS'],\n                    'group.id': groupID,\n                    'auto.offset.reset': \"earliest\",\n                    'enable.auto.commit': autocommit,\n            }\n            if (os.getenv('KAFKA_PASSWORD','') != ''):\n                # Set security protocol common to ES on prem and on IBM Cloud\n                options['security.protocol'] = 'SASL_SSL'\n                # Depending on the Kafka User, we will know whether we are talking to ES on prem or on IBM Cloud\n                # If we are connecting to ES on IBM Cloud, the SASL mechanism is plain\n                if (os.getenv('KAFKA_USER','') == 'token'):\n                    options['sasl.mechanisms'] = 'PLAIN'\n                # If we are connecting to ES on OCP, the SASL mechanism is scram-sha-512\n                else:\n                    options['sasl.mechanisms'] = 'SCRAM-SHA-512'\n                # Set the SASL username and password\n                options['sasl.username'] = os.getenv('KAFKA_USER','')\n                options['sasl.password'] = os.getenv('KAFKA_PASSWORD','')\n            # If we are talking to ES on prem, it uses an SSL self-signed certificate.\n            # Therefore, we need the CA public certificate for the SSL connection to happen.\n            if (os.path.isfile(os.getenv('KAFKA_CERT','/certs/es-cert.pem'))):\n                options['ssl.ca.location'] = os.getenv('KAFKA_CERT','/certs/es-cert.pem')\n\n            # Print out the producer configuration\n            self.printConsumerConfiguration(options)\n\n            return options\n\n        except KeyError as error:\n            print('[KafkaConsumer] - [ERROR] - A required environment variable does not exist: ' + error)\n            exit(1)\n    \n    def printConsumerConfiguration(self,options):\n        # Printing out consumer config for debugging purposes        \n        print(\"[KafkaConsumer] - This is the configuration for the consumer:\")\n        print(\"[KafkaConsumer] - -------------------------------------------\")\n        print('[KafkaConsumer] - Bootstrap Server:      {}'.format(options['bootstrap.servers']))\n        if (os.getenv('KAFKA_PASSWORD','') != ''):\n            # Obfuscate password\n            if (len(options['sasl.password']) > 3):\n                obfuscated_password = options['sasl.password'][0] + \"*****\" + options['sasl.password'][len(options['sasl.password'])-1]\n            else:\n                obfuscated_password = \"*******\"\n            print('[KafkaConsumer] - Security Protocol:     {}'.format(options['security.protocol']))\n            print('[KafkaConsumer] - SASL Mechanism:        {}'.format(options['sasl.mechanisms']))\n            print('[KafkaConsumer] - SASL Username:         {}'.format(options['sasl.username']))\n            print('[KafkaConsumer] - SASL Password:         {}'.format(obfuscated_password))\n            if (os.path.isfile(os.getenv('KAFKA_CERT','/certs/es-cert.pem'))): \n                print('[KafkaConsumer] - SSL CA Location:       {}'.format(options['ssl.ca.location']))\n        print('[KafkaConsumer] - Offset Reset:          {}'.format(options['auto.offset.reset']))\n        print('[KafkaConsumer] - Autocommit:            {}'.format(options['enable.auto.commit']))\n        print(\"[KafkaConsumer] - -------------------------------------------\")\n    \n    # Prints out and returns the decoded events received by the consumer\n    def traceResponse(self, msg):\n        print('[KafkaConsumer] - Next Message consumed from {} partition: [{}] at offset: {}\\\\n\\\\tkey: {}\\\\n\\\\tvalue: {}'\n                    .format(msg.topic(), msg.partition(), msg.offset(), msg.key().decode('utf-8'), msg.value().decode('utf-8')))\n\n    # Polls for next event\n    def pollNextEvent(self):\n        # Poll for messages\n        msg = self.consumer.poll(timeout=10.0)\n        # Validate the returned message\n        if msg is None:\n            print(\"[KafkaConsumer] - [INFO] - No new messages on the topic\")\n        elif msg.error():\n            if (\"PARTITION_EOF\" in msg.error()):\n                print(\"[KafkaConsumer] - [INFO] - End of partition\")\n            else:\n                print(\"[KafkaConsumer] - [ERROR] - Consumer error: {}\".format(msg.error()))\n        else:\n            # Print the message\n            self.traceResponse(msg)\n    \n    def close(self):\n        self.consumer.close()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Now for the plain Kafka Python consumer`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`ConsumePlainMessage.py`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import argparse\nfrom KafkaConsumer import KafkaConsumer\n\n####################### MAIN #######################\nif __name__ == '__main__':\n    \n    # Parse arguments\n    parser = argparse.ArgumentParser(description=\"Message Consumer Example\")\n    parser.add_argument('-t', dest=\"topic\", required=True, help=\"Topic name\")\n    args = parser.parse_args()\n\n    # Create a Kafka Consumer\n    kafka_consumer = KafkaConsumer(args.topic)\n    # Poll for next message\n    kafka_consumer.pollNextEvent()\n    # Close the consumer\n    kafka_consumer.close()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`In `}<inlineCode parentName=\"li\">{`KafkaProducer.py`}</inlineCode>{` as well as `}<inlineCode parentName=\"li\">{`KafkaConsumer.py`}</inlineCode>{` we will need to provide environment variables so that our producer can parse it and actually connect to an Event Streams intance.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export KAFKA_BROKERS=your-brokers \\\\\nexport KAFKA_USER=your-scram-username \\\\\nexport KAFKA_PASSWORD=your-scram-password \\\\\nexport KAFKA_CERT=your-cert-path\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To run your Producer and send a simple message - `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`python ProducePlainMessage.py -t <your-topic-name>\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To consume`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`python ConsumePlainMessage.py -t <your-topic-name>\n`}</code></pre>\n    <h2>{`Node.js Developer Environment`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The following code is based off this application `}<a parentName=\"p\" {...{\n            \"href\": \"https://chrisphillips-cminion.github.io/eventstreams/2019/08/22/NodeJS-IBMES-101.html\"\n          }}>{`here`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will make use of the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Blizzard/node-rdkafka\"\n          }}>{`node-rdkafka`}</a>{` library for our purposes. Therefore we will need to install the dependency for the project first:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install node-rdkafka --save\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here is a simple Node.js producer application that will produce 20 messages to the Kafka topic.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`producer.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var Kafka = require('node-rdkafka');\n\nvar kafka_options = {\n    //'debug': 'all',\n    'metadata.broker.list': process.env.KAFKA_BROKERS,\n    'security.protocol': 'sasl_ssl',\n    'sasl.mechanisms': 'SCRAM-SHA-512',\n    'sasl.username': process.env.SCRAM_USERNAME,\n    'sasl.password': process.env.SCRAM_PASSWORD,\n    'ssl.ca.location': process.env.PEM_PATH,\n    'log.connection.close' : false,\n    'client.id': 'ES-NodeJS-101'\n};\n\nvar topicName = process.env.TOPIC_NAME\n\nproducer = new Kafka.Producer(kafka_options);\nproducer.setPollInterval(100);\n// Register listener for debug information; only invoked if debug option set in kafka_options\nproducer.on('event.log', function(log) {\n    console.log(log);\n});\n// Register error listener\nproducer.on('event.error', function(err) {\n    console.error('Error from producer:' + JSON.stringify(err));\n});\n\n// Register delivery report listener\nproducer.on('delivery-report', function(err, dr) {\n    if (err) {\n        console.error('Delivery report: Failed sending message ' + dr.value);\n        console.error(err);\n        // We could retry sending the message\n    } else {\n        console.log('Message produced, partition: ' + dr.partition + ' offset: ' + dr.offset);\n    }\n});\n\nvar sendMessageToTopic = function() {\n    console.log('The producer has connected.');\n    const genMessage = i => new Buffer.from(\\`Kafka example, message number \\${i}\\`);\n    console.log('Producer is now sending 20 messages to the Kafka Topic');\n    const maxMessages = 20;\n    for (var i = 0; i < maxMessages; i++) {\n        producer.produce(topicName, -1, genMessage(i), i);\n    }\n}\n\n// Register callback invoked when producer has connected\nproducer.on('ready', function() {\n\n    sendMessageToTopic();\n\n    // request metadata for all topics\n    producer.getMetadata({\n        timeout: 10000\n    },\n    function(err, metadata) {\n        if (err) {\n            console.error('Error getting metadata: ' + JSON.stringify(err));\n            shutdown(-1);\n        } else {\n            console.log('Producer obtained metadata: ' + JSON.stringify(metadata));\n            var topicsByName = metadata.topics.filter(function(t) {\n                return t.name === topicName;\n            });\n            if (topicsByName.length === 0) {\n                console.error('ERROR - Topic ' + topicName + ' does not exist. Exiting');\n                shutdown(-1);\n            }\n        }\n    });\n    var counter = 0;\n});\n\nproducer.connect();\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Below is a simple Node.js consumer:`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`consumer.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var Kafka = require('node-rdkafka');\n\nvar kafka_options = {\n    //'debug': 'all',\n    'metadata.broker.list': process.env.KAFKA_BROKERS,\n    'security.protocol': 'sasl_ssl',\n    'sasl.mechanisms': 'SCRAM-SHA-512',\n    'sasl.username': process.env.SCRAM_USERNAME,\n    'sasl.password': process.env.SCRAM_PASSWORD,\n    'ssl.ca.location': process.env.PEM_PATH,\n    'log.connection.close' : false,\n    'group.id': 'ES-NodeJS-101-consumer'\n};\n\n\n\nvar topicName = process.env.TOPIC_NAME\n\nconst consumer = new Kafka.KafkaConsumer(kafka_options, {\n    \"auto.offset.reset\": \"beginning\"\n  });\n\n\nconsumer.on('event.log', function(log) {\n    console.log(log);\n});\n\n// Register error listener\nconsumer.on('event.error', function(err) {\n    console.error('Error from consumer:' + JSON.stringify(err));\n});\n\nvar consumedMessages = []\n// Register callback to be invoked when consumer has connected\nconsumer.on('ready', function() {\n    console.log('The consumer has connected.');\n\n    // request metadata for one topic\n    consumer.getMetadata({\n        topic: topicName,\n        timeout: 10000\n    },\n    function(err, metadata) {\n        if (err) {\n            console.error('Error getting metadata: ' + JSON.stringify(err));\n            shutdown(-1);\n        } else {\n            console.log('Consumer obtained metadata: ' + JSON.stringify(metadata));\n\n        }\n    });\n\n    consumer.subscribe([topicName]);\n\n    consumerLoop = setInterval(function () {\n        if (consumer.isConnected()) {\n            // The consume(num, cb) method can take a callback to process messages.\n            // In this sample code we use the \".on('data')\" event listener instead,\n            // for illustrative purposes.\n            consumer.consume(10);\n        }    \n\n        if (consumedMessages.length === 0) {\n            console.log('No messages consumed');\n        } else {\n            for (var i = 0; i < consumedMessages.length; i++) {\n                var m = consumedMessages[i];\n                console.log('Message consumed: topic=' + m.topic + ', partition=' + m.partition + ', offset=' + m.offset + ', key=' + m.key + ', value=' + m.value.toString());\n            }\n            consumedMessages = [];\n        }\n    }, 2000);\n});\n\n// Register a listener to process received messages\nconsumer.on('data', function(m) {\n    consumedMessages.push(m);\n});\n\nconsumer.connect()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Like the Python environments, we will need a SCRAM Username, password, and the PEM Certificate. We will need a few environment variables to provide to our application so that it can connect to Event Streams.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export KAFKA_BROKERS=your-external-bootstrap-server-address \\\\\nexport SCRAM_USERNAME=your-scram-username \\\\\nexport SCRAM_PASSWORD=your-scram-password \\\\\nexport TOPIC_NAME=your-topic-name \\\\\nexport PEM_PATH=/path-to-your-pem-certificate/es-cert.pem\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To run these applications after exporting the necessary environment variables:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node producer.js\nnode consumer.js\n`}</code></pre>\n    <h1>{`Golang Developer Environment`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Similar to the Python Developer environment, we can leverage the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/confluentinc/confluent-kafka-go\"\n        }}>{`Confluent-kafka-go`}</a>{` library.`}</li>\n      <li parentName=\"ul\">{`If using Go/Golang v 1.13 and newer you can get it using Go Modules by importing via github.`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`import \"github.com/confluentinc/confluent-kafka-go/kafka\"`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`go build ./...`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Otherwise if you cannot use Go modules you can manually install it`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`go get -u gopkg.in/confluentinc/confluent-kafka-go.v1/kafka`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`import \"gopkg.in/confluentinc/confluent-kafka-go.v1/kafka\"`}</inlineCode></li>\n          <li parentName=\"ul\">{`Note that our sample producer and consumer uses this option.`}</li>\n        </ul></li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`Below is a simple Go Kafka producer that sends 7 Test messages.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`producer.go`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"gopkg.in/confluentinc/confluent-kafka-go.v1/kafka\"\n)\n\nfunc main() {\n\n    kafkaBrokers := os.Getenv(\"KAFKA_BROKERS\")\n    scramUsername := os.Getenv(\"SCRAM_USERNAME\")\n    scramPassword := os.Getenv(\"SCRAM_PASSWORD\")\n    pemPath := os.Getenv(\"PEM_PATH\")\n    topic := os.Getenv(\"TOPIC_NAME\")\n\n\n    p, err := kafka.NewProducer(&kafka.ConfigMap {\n        \"bootstrap.servers\": kafkaBrokers,\n        \"security.protocol\": \"SASL_SSL\",\n        \"sasl.mechanism\": \"SCRAM-SHA-512\",\n        \"group.id\": \"golang-kafka-producer\",\n        \"sasl.username\": scramUsername,\n        \"sasl.password\": scramPassword,\n        \"ssl.ca.location\": pemPath})\n\n    if err != nil {\n        panic(err)\n    }\n\n    defer p.Close()\n\n    // Delivery report handler for produced messages\n    go func() {\n        for e := range p.Events() {\n            switch ev := e.(type) {\n            case *kafka.Message:\n                if ev.TopicPartition.Error != nil {\n                    fmt.Printf(\"Delivery failed: %v\\\\n\", ev.TopicPartition)\n                } else {\n                    fmt.Printf(\"Delivered message to %v\\\\n\", ev.TopicPartition)\n                }\n            }\n        }\n    }()\n\n    // Produce messages to topic (asynchronously)\n    for _, word := range []string{\"TEST\", \"TEST1\", \"TEST2\", \"TEST3\", \"TEST4\", \"TEST5\", \"TEST6\"} {\n        p.Produce(&kafka.Message{\n            TopicPartition: kafka.TopicPartition{Topic: &topic, Partition: kafka.PartitionAny},\n            Value: []byte(word),\n        }, nil)\n    }\n\n    // Wait for message deliveries before shutting down\n    p.Flush(15 * 1000)\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Also we have a simple consumer application:`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`consumer.go`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"gopkg.in/confluentinc/confluent-kafka-go.v1/kafka\"\n)\n\nfunc main() {\n\n    kafkaBrokers := os.Getenv(\"KAFKA_BROKERS\")\n    scramUsername := os.Getenv(\"SCRAM_USERNAME\")\n    scramPassword := os.Getenv(\"SCRAM_PASSWORD\")\n    pemPath := os.Getenv(\"PEM_PATH\")\n    topic := os.Getenv(\"TOPIC_NAME\")\n\n    c, err := kafka.NewConsumer(&kafka.ConfigMap{\n        \"bootstrap.servers\": kafkaBrokers,\n        \"security.protocol\": \"SASL_SSL\",\n        \"sasl.mechanism\": \"SCRAM-SHA-512\",\n        \"sasl.username\": scramUsername,\n        \"sasl.password\": scramPassword,\n        \"ssl.ca.location\": pemPath,\n        \"group.id\": \"golang-kafka-consumer\",\n        \"auto.offset.reset\": \"earliest\"})\n\n    if err != nil {\n        panic(err)\n    }\n\n    c.SubscribeTopics([]string{topic, \"^aRegex.*[Tt]opic\"}, nil)\n\n    for {\n        msg, err := c.ReadMessage(-1)\n        if err == nil {\n            fmt.Printf(\"Message on %s: %s\\\\n\", msg.TopicPartition, string(msg.Value))\n        } else {\n            // The client will automatically try to recover from all errors.\n            fmt.Printf(\"Consumer error: %v (%v)\\\\n\", err, msg)\n        }\n    }\n\n    c.Close()\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Like all the previous developer environments (Java, Python and Node.js) we will need to set environment variables for our application. Replace the values below with your own.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export KAFKA_BROKERS=your-external-bootstrap-address:443 \\\\\nexport SCRAM_USERNAME=your-scram-username \\\\\nexport SCRAM_PASSWORD=your-scram-pasword \\\\\nexport PEM_PATH=/path-to-pem-cert/es-cert.pem \\\\\nexport TOPIC_NAME=your-topic\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Now you can test the applications.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run consumer.go\ngo run producer.go\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}