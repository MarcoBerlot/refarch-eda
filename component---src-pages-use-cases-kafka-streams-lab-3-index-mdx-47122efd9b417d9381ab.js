(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{"M+yy":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n("wx14"),r=n("zLVn"),o=(n("q1tI"),n("7ljp")),i=n("013z"),s=(n("qKvR"),{}),l=function(e){return function(t){return console.warn("Component '"+e+"' was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",t)}},c=l("InlineNotification"),p=l("AnchorLinks"),u=l("AnchorLink"),b={_frontmatter:s},m=i.a;function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(m,Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(c,{kind:"warning",mdxType:"InlineNotification"},Object(o.b)("strong",null,"TODO")," - Work in progress"),Object(o.b)(p,{mdxType:"AnchorLinks"},Object(o.b)(u,{mdxType:"AnchorLink"},"Overview"),Object(o.b)(u,{mdxType:"AnchorLink"},"Scenario Prerequisites"),Object(o.b)(u,{mdxType:"AnchorLink"},"Develop the application"),Object(o.b)(u,{mdxType:"AnchorLink"},"Integration Tests"),Object(o.b)(u,{mdxType:"AnchorLink"},"Deploy to OpenShift")),Object(o.b)("h2",null,"Overview"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"In this lab scenario weâ€™re going to use ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://quarkus.io"}),"Quarkus")," to develop the core application with Kafka streams api and microprofile reactive messaging."),Object(o.b)("li",{parentName:"ul"},"We will be testing using ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://kafka.apache.org/documentation/streams/"}),"Apache Kafka Streams")," TestDriver to mimic a Topology, a Stream and Table.")),Object(o.b)("p",null,"The requirements to address are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"consume item sold from items topic, item has unique key. Item event has store information"),Object(o.b)("li",{parentName:"ul"},"compute for each item its current stock cross store"),Object(o.b)("li",{parentName:"ul"},"compute the store stock for each item"),Object(o.b)("li",{parentName:"ul"},"generate inventory event for store - item - stock"),Object(o.b)("li",{parentName:"ul"},"expose APIs to get stock for a store or for an item")),Object(o.b)("h2",null,"Scenario Prerequisites"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Java")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For the purposes of this lab we suggest Java 11+")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Maven")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Maven will be needed for bootstrapping our application from the command-line and running\nour application.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"An IDE of your choice")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Ideally an IDE that supports Quarkus (such as Visual Studio Code)")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"OpenShift Container Platform")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"v4.4.x")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"IBM Cloud Pak for Integration")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"CP4I2020.2")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"IBM Event Streams")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The section on use with Event Streams on CP4I assumes Event Streams v10. If using a previous version such as ESv2019.4.2, there are some differences to how you would configure ",Object(o.b)("inlineCode",{parentName:"li"},"application.properties")," to establish a connection.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Code Source"),": clone the following git repository: ",Object(o.b)("inlineCode",{parentName:"p"},"git clone https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory"),"."),Object(o.b)("p",null,"The final source code is in this project: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory"}),"https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory"),"."),Object(o.b)("h2",null,"Use application as-is"),Object(o.b)("p",null,"If you do not want to develop the application, you can deploy it on OpenShift using our docker image. See the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory"}),"repository readme")," to do so."),Object(o.b)("h2",null,"Develop the application"),Object(o.b)("h3",null,"Setting up the Quarkus Application"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We will bootstrap the Quarkus application with the following Maven command (See ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://quarkus.io/guides/maven-tooling#project-creation"}),"Quarkus maven tooling guide")," for more information):")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'mvn io.quarkus:quarkus-maven-plugin:1.7.2.Final:create \\\n    -DprojectGroupId=ibm.garage \\\n    -DprojectArtifactId=quarkus-kstreams-lab3 \\\n    -Dextensions="resteasy-jsonb,resteasy-mutiny,smallrye-health,quarkus-smallrye-openapi,openshift"\n')),Object(o.b)("p",null,"You can replace the ",Object(o.b)("inlineCode",{parentName:"p"},"projectGroupId, projectArtifactId")," fields as you like."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"recall that is if you want to add an extension do something like: ",Object(o.b)("inlineCode",{parentName:"li"},'./mvnw Quarkus:add-extension -Dextensions="kafka"'))),Object(o.b)("h3",null,"Start the dev mode"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"./mvnw quarkus:dev\n")),Object(o.b)("p",null,"Going to the URL ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8080/"}),"http://localhost:8080/")," will generate an exception, as we need to add configuration for Kafka-Streams."),Object(o.b)("p",null,"Let add the minimum into the ",Object(o.b)("inlineCode",{parentName:"p"},"application.properties")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-properties"}),"quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n\nquarkus.log.console.level=INFO\nquarkus.log.console.enable=true\nquarkus.http.port=8080\nquarkus.swagger-ui.always-include=true\nquarkus.openshift.expose=true\n")),Object(o.b)("p",null,"Now the application should display a basic web page. As we defined to use OpenAPI the following address should give us the API defined: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8080/swagger-ui/#/default"}),"http://localhost:8080/swagger-ui/#/default"),"."),Object(o.b)("p",null,"and health works too: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8080/health"}),"http://localhost:8080/health")),Object(o.b)("p",null,"Let add a simple resource under the following package ",Object(o.b)("inlineCode",{parentName:"p"},"ibm.garage.lab3.api")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'mport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport io.smallrye.mutiny.Uni;\nimport io.vertx.core.json.JsonObject;\n\n@ApplicationScoped\n@Path("/inventory")\npublic class InventoryResource {\n    \n    @GET\n    @Path("/store/{storeID}")\n    @Produces(MediaType.APPLICATION_JSON)\n    public  Uni<JsonObject> getStock(@PathParam("storeID") String storeID) {\n            JsonObject stock = new JsonObject("{\\"name\\": \\"hello you\\", \\"id\\": \\"" + storeID + "\\"}");\n            return Uni.createFrom().item( stock);\n    }\n}\n')),Object(o.b)("p",null,"Outside of the traditional JAXRS annotation, we are using Uni class from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://smallrye.io/smallrye-mutiny/"}),"Mutiny")," to get the API being asynchronous non-blocking."),Object(o.b)("p",null,"A refresh ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8080/swagger-ui/"}),"http://localhost:8080/swagger-ui/")," will get the new API which should work."),Object(o.b)("h3",null,"Deploy to OpenShift using s2i"),Object(o.b)("p",null,"Before going too far in the development, let deploy this simple app to OpenShift. We assume you are logged to the cluster via ",Object(o.b)("inlineCode",{parentName:"p"},"oc login...")),Object(o.b)("p",null,"The following command should package the application and create OpenShift manifests, build a docker images and push it to OpenShift Private registry."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"./mvnw package -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.build=true\n")),Object(o.b)("p",null,"It can take some seconds to build and deploy: ",Object(o.b)("inlineCode",{parentName:"p"},"oc get pods -w")," lets you see the build pods and the running app once the build is done. As we expose the application an OpenShift route was created. The url is at the end of the build output:\n",Object(o.b)("inlineCode",{parentName:"p"},"The deployed application can be accessed at: http://quarkus-kstreams-lab3...")),Object(o.b)("p",null,"For example this was the URL to access the swagger:"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://quarkus-kstreams-lab3-jbsandbox.gse-eda-demo-2020-08-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud/swagger-ui/"}),"http://quarkus-kstreams-lab3-jbsandbox.gse-eda-demo-2020-08-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud/swagger-ui/")),Object(o.b)("h3",null,"Define the domain entities"),Object(o.b)("p",null,"Under the ",Object(o.b)("inlineCode",{parentName:"p"},"src/main/java/../domain")," folder add the two classes representing the business entities we are using:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),'public class Item {\n    public static String RESTOCK = "RESTOCK";\n    public static String SALE = "SALE";\n    public String storeName;\n    public String sku;\n    public int quantity;\n    public String type;\n    public Double price;\n    public String timestamp;\n\n    public Item(){}\n}\n')),Object(o.b)("p",null,"This item will also being used for event structure on ",Object(o.b)("inlineCode",{parentName:"p"},"items")," topic. The type attribute is to specify if this is a sale event or a restock event."),Object(o.b)("p",null,"The inventory per store includes a map of item.sku and quantity."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),"public class Inventory {\n    public String storeName;\n    public HashMap<String,Long> stock = new HashMap<String,Long>();\n    public Inventory(){}\n}\n")),Object(o.b)("p",null,"As part of the logic we want to add methods in the Inventory class to update the quantity given an item. So the two following methods are added"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),'public Inventory updateStockQuantity(String k, Item newValue) {\n        this.storeName = k;\n        if (newValue.type.equals("SALE")) \n            newValue.quantity=-newValue.quantity;\n        return this.updateStock(newValue.sku,newValue.quantity);\n    }\n\n    public Inventory updateStock(String sku, long newV) {\n        if (stock.get(sku) == null) {\n            stock.put(sku, Long.valueOf(newV));\n        } else {\n            Long currentValue = stock.get(sku);\n            stock.put(sku, Long.valueOf(newV) + currentValue );\n        }\n        return this;\n    }\n')),Object(o.b)("p",null,"Modify the InventoryResource to return the inventory instead of JsonObject."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public  Uni<Inventory> getStock(@PathParam("storeID") String storeID) {\n        Inventory stock = new Inventory();\n        stock.storeName = storeID;\n        Item newItem = new Item();\n        newItem.quantity = 10;\n        newItem.sku="item-01";\n        newItem.type = Item.RESTOCK;\n        stock.updateStockQuantity(storeID, newItem);\n            return Uni.createFrom().item( stock);\n    }\n')),Object(o.b)("p",null,"You should get a json like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{"stock": {\n    "item-01": 10\n  },\n  "storeName": "Store-A"\n}\n')),Object(o.b)("p",null,"We are good with the REST end point. Lets add Kafka-streams"),Object(o.b)("h3",null,"Add Kafka"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'./mvnw Quarkus:add-extension -Dextensions="kafka,kafka-streams,smallrye-reactive-messaging-kafka"\n')),Object(o.b)("p",null,"Since we will be using the Kafka Streams testing functionality we will need to edit the ",Object(o.b)("inlineCode",{parentName:"p"},"pom.xml")," to add\nthe dependency to our project. Open ",Object(o.b)("inlineCode",{parentName:"p"},"pom.xml")," and add the following."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>2.5.0</version>\n    <scope>test</scope>\n</dependency>\n")),Object(o.b)("p",null,"Modify the properties to add kafka, kafka-streams and reactive messaging parameters like"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-properties"}),"quarkus.kafka-streams.auto.offset.reset=latest\nquarkus.kafka-streams.health.enabled=true\nquarkus.kafka-streams.consumer.session.timeout.ms=7000\nquarkus.kafka-streams.consumer.heartbeat.interval.ms=200\nquarkus.kafka-streams.application-id=item-aggregator\nquarkus.kafka-streams.topics=items,inventory\n\nmp.messaging.incoming.item-channel.connector=smallrye-kafka\nmp.messaging.incoming.item-channel.topic=items\nmp.messaging.incoming.item-channel.group.id=item-aggregator\n")),Object(o.b)("h3",null,"Define an item deserializer"),Object(o.b)("p",null,"The item needs to be deserialized to a Item bean, so we add a new class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"import io.quarkus.kafka.client.serialization.JsonbDeserializer;\n\npublic class ItemDeserializer extends JsonbDeserializer<Item> {\n    public ItemDeserializer(){\n        // pass the class to the parent.\n        super(Item.class);\n    }\n}\n")),Object(o.b)("p",null,"and a declaration in the properties file (change the class name if needed):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-properties"}),"mp.messaging.incoming.item-channel.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.item-channel.value.deserializer=ibm.garage.lab3.infrastructure.ItemDeserializer\n")),Object(o.b)("h3",null,"Define the topology"),Object(o.b)("p",null,"While in dev mode, we can add the ",Object(o.b)("inlineCode",{parentName:"p"},"StoreInventoryAgent")," class under the infrastructure folder. This class will define the topology to consume messages from the ",Object(o.b)("inlineCode",{parentName:"p"},"items")," topic. The Serdes are class to support the serialization and deserialization of the beans we define as part of the event model."),Object(o.b)("p",null,"We will start just by having a print out topology to get the plumbing done. So it will consume items topic:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),'@ApplicationScoped\npublic class StoreInventoryAgent {\n    \n    public String itemSoldTopicName = "items";\n\n    private JsonbSerde<Item> itemSerde = new JsonbSerde<>(Item.class);\n   \n\n    public Topology buildTopology(){\n        StreamsBuilder builder = new StreamsBuilder();\n        \n        builder.stream(itemSoldTopicName, \n            Consumed.with(Serdes.String(), itemSerde))\n            .peek( (k,v) -> System.out.println(k));\n\n        return builder.build();\n    }\n}\n')),Object(o.b)("h3",null,"Connect to Event Streams"),Object(o.b)("p",null,"We need to complete the configuration to connect to the remote Event Streams running on OpenShift."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Create the items and inventory topics, following the instructions as described ","[in this note]","(../.. /overview/pre-requisites#creating-event-streams-topics) or using the following command:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"cloudctl es topic-create --name items --partitions 3 --replication-factor 3\ncloudctl es topic-create --name inventory --partitions 1 --replication-factor 3\ncloudctl es topics\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Get a user and scram-sha-512 password to remotely connect ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://ibm.github.io/event-streams/getting-started/connecting/"}),"see product documentation")," on how to do it, or use our ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8000/use-cases/overview/pre-requisites#get-shram-user"}),"quick summary here"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Get Server certificate. See our ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:8000/use-cases/overview/pre-requisites#get-tls-server-public-certificate"}),"quick summary here"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Modify the properties file to define the kafka connection properties:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-properties"}),'kafka.bootstrap.servers=${KAFKA_BROKERS}\nkafka.security.protocol=${SECURE_PROTOCOL}\nkafka.ssl.protocol=TLSv1.2\nkafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username\\=\\"${KAFKA_USER}\\" password\\=\\"${KAFKA_PASSWORD}\\";\nkafka.sasl.mechanism=SCRAM-SHA-512\nkafka.ssl.truststore.location=${KAFKA_CERT_PATH}\nkafka.ssl.truststore.password=${KAFKA_CERT_PWD}\nkafka.ssl.truststore.type=PKCS12\n'))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Define a file like ",Object(o.b)("inlineCode",{parentName:"p"},".env")," to set environment variables, and modify the settings accordingly"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"KAFKA_BROKERS=minimal-prod-kafka-bootstrap-eventstreams....containers.appdomain.cloud:443\nKAFKA_USER=\nKAFKA_PASSWORD=\nKAFKA_CERT_PATH=${PWD}/certs/es-cert.p12\nKAFKA_CERT_PWD=\nSECURE_PROTOCOL=SASL_SSL\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Restart the quarkus in dev mode"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"source .env\n./mvnw quarkus:dev\n")),Object(o.b)("p",{parentName:"li"},"normally you should not get any exception and a trace like"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"   AdminClientConfig values: \n   bootstrap.servers = [minimal-prod-kafka-bootstrap-eventstreams.gse-.....containers.appdomain.cloud:443]\n   client.dns.lookup = default\n   client.id = \n   connections.max.idle.ms = 300000\n   default.api.timeout.ms = 60000\n   metadata.max.age.ms = 300000\n   metric.reporters = []\n   metrics.num.samples = 2\n   metrics.recording.level = INFO\n   metrics.sample.window.ms = 30000\n")))),Object(o.b)("h3",null,"Complete the topology"),Object(o.b)("p",null,"The requirements can be bullet listed as:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"out-topic: inventory: contains the invenory stock events."),Object(o.b)("li",{parentName:"ul"},"Ktable <storeID, <itemID, count> with store. To keep store inventory"),Object(o.b)("li",{parentName:"ul"},"Interactive query to get data from store and expose the result as reactive REST resource.")),Object(o.b)("p",null,"To update the buildTopology function by getting the store and build a Ktable"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"})," KTable<String,Inventory> inventory = builder.stream(itemSoldTopicName, \n                        Consumed.with(Serdes.String(), itemSerde))\n            // use store name as key\n            .map((k,v) ->  new KeyValue<>(v.storeName, v))\n            .groupByKey(Grouped.with(Serdes.String(),itemSerde))\n       \n")),Object(o.b)("p",null,"Then the operation to take this <storeName, item> record and transform it to Inventory instance, and update existing inventory entry is the ",Object(o.b)("inlineCode",{parentName:"p"},"aggregate")," function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),".aggregate(\n      () ->  new Inventory(), // initializer\n      (k , newItem, currentInventory) \n            -> currentInventory.updateStockQuantity(k,newItem), \n      Materialized.<String,Inventory,KeyValueStore<Bytes,byte[]>>as(StoreInventoryAgent.STOCKS_STORE_NAME)\n            .withKeySerde(Serdes.String())\n            .withValueSerde(inventorySerde));\n")),Object(o.b)("p",null,"First row is to initialize new key, record with an empty Inventory object.\nThe second row is executed when a key is found (first key too), and update the currentInventory with the new quantity from the item. The outcome of this is a Ktable<storeName, Inventory>\nThe content is materialized in a store."),Object(o.b)("p",null,"The update operation on the inventory is a simple hashmap update: "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),'// in Inventory Class\npublic Inventory updateStockQuantity(String k, Item newValue) {\n        this.storeName = k;\n        if (newValue.type.equals("SALE")) \n            newValue.quantity=-newValue.quantity;\n        return this.updateStock(newValue.sku,newValue.quantity);\n    }\n\n    public Inventory updateStock(String sku, long newV) {\n        if (stock.get(sku) == null) {\n            stock.put(sku, Long.valueOf(newV));\n        } else {\n            Long currentValue = stock.get(sku);\n            stock.put(sku, Long.valueOf(newV) + currentValue );\n        }\n        return this;\n    }\n')),Object(o.b)("p",null,"Finally the KTable is streamed out to the inventory topic:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Java"}),"inventory.toStream()\n            .to(inventoryStockTopicName,\n                Produced.with(Serdes.String(),inventorySerde));\n      \n")),Object(o.b)("p",null,"The KTable is also materialized as a store that can be accessed via an API like ",Object(o.b)("inlineCode",{parentName:"p"},"/inventory/store/{storeid}/{itemid}")," using interactive query."),Object(o.b)("p",null,"As items topic can be partitioned, a REST call may not reach the good end points, as the local store may not have the expected queried key. So the code is using interactive query to get access to the local state stores or return a URL of a remote store where the records for the given key are."),Object(o.b)("h2",null,"Integration tests"),Object(o.b)("p",null," For running the integration test, we propose to copy the e2e folder from the solution repository and follow the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory#end-to-end-testing"}),"readme instructions section end-to-end-testing "),"."),Object(o.b)("h2",null,"Deploy to OpenShift"),Object(o.b)("p",null,"Be sure to have done ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../overview/pre-requisites#getting-tls-authentication-from-event-streams-on-openshift"}),"the steps described here")," to get user credentials and Server side certificate.\nWe need to define a config map manifest (src/main/kubernetes/configmap.yml) for the user and brokers internal URL. The userID used is one of the scram-sha-512 ones."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: item-aggregator-cm\ndata:\n   KAFKA_USER: app-demo\n   SECURE_PROTOCOL: SASL_SSL\n   KAFKA_BROKERS: minimal-prod-kafka-bootstrap.eventstreams.svc:9093\n")),Object(o.b)("p",null,"Configure it with ",Object(o.b)("inlineCode",{parentName:"p"},"oc apply -f src/main/kubernetes/configmap.yml"),"."))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-use-cases-kafka-streams-lab-3-index-mdx-47122efd9b417d9381ab.js.map