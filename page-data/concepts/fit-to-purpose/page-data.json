{"componentChunkName":"component---src-pages-concepts-fit-to-purpose-index-mdx","path":"/concepts/fit-to-purpose/","result":{"pageContext":{"frontmatter":{"title":"Fit to purposes","description":"Different fit to purpose evaluation and criteria for technologies involved in EDA"},"relativePagePath":"/concepts/fit-to-purpose/index.mdx","titleType":"append","MdxNode":{"id":"ee5c26f8-0bdb-5150-9d97-f586a8f28220","children":[],"parent":"1adc8d9a-90fd-5f54-a216-c3238bade35e","internal":{"content":"---\ntitle: Fit to purposes\ndescription: Different fit to purpose evaluation and criteria for technologies involved in EDA\n---\n\nIn this note we want to list some of the criterias to consider and assess during an architecture establishment work. This is not fully exhaustive, but give good foundation for analysis and study.\n\n## MQ Versus Kafka\n\nConsider queue system for:\n\n* Exactly once, and to participate into two phase commit transaction\n* Asynchronous request / reply communication\n* To implement operations/ commands to target a system to do something\n\nConsider Kafka as pub/sub and persistence system for:\n\n* Publish events as immutable facts of what happen in an application\n* Get continuous visibility of the data Streams\n* Keep data once consumed, for future consumers, for replayability\n* Scale horizontally the message consumption\n\n## Kafka Streams vs Apache Flink\n\n[Apache Flink]() supports doing stream processing in real time and / or in batch. \n\nApache Flink:\n\n* \n\nSee also [this article from Confluent]()","type":"Mdx","contentDigest":"33581373a6400a40f08faeccd1518ea2","counter":636,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Fit to purposes","description":"Different fit to purpose evaluation and criteria for technologies involved in EDA"},"exports":{},"rawBody":"---\ntitle: Fit to purposes\ndescription: Different fit to purpose evaluation and criteria for technologies involved in EDA\n---\n\nIn this note we want to list some of the criterias to consider and assess during an architecture establishment work. This is not fully exhaustive, but give good foundation for analysis and study.\n\n## MQ Versus Kafka\n\nConsider queue system for:\n\n* Exactly once, and to participate into two phase commit transaction\n* Asynchronous request / reply communication\n* To implement operations/ commands to target a system to do something\n\nConsider Kafka as pub/sub and persistence system for:\n\n* Publish events as immutable facts of what happen in an application\n* Get continuous visibility of the data Streams\n* Keep data once consumed, for future consumers, for replayability\n* Scale horizontally the message consumption\n\n## Kafka Streams vs Apache Flink\n\n[Apache Flink]() supports doing stream processing in real time and / or in batch. \n\nApache Flink:\n\n* \n\nSee also [this article from Confluent]()","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/concepts/fit-to-purpose/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}