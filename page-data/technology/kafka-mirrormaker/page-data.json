{"componentChunkName":"component---src-pages-technology-kafka-mirrormaker-index-mdx","path":"/technology/kafka-mirrormaker/","result":{"pageContext":{"frontmatter":{"title":"Kafka Mirror Maker 2","description":"Kafka Mirror Maker 2"},"relativePagePath":"/technology/kafka-mirrormaker/index.mdx","titleType":"append","MdxNode":{"id":"6a0a26a8-1ae5-556d-b1f1-194d5080a1e2","children":[],"parent":"5daff97d-73d5-559c-8cb8-e95f0e85aa65","internal":{"content":"---\ntitle: Kafka Mirror Maker 2\ndescription: Kafka Mirror Maker 2\n---\n\nThis section introduces **Mirror Maker 2.0**, the new replication feature of Kafka 2.4, and how it can be used, along with best practices, for data replication between two Kafka clusters. Mirror Maker 2.0 was defined as part of the Kafka Improvement Process - [KIP 382](https://cwiki.apache.org/confluence/display/KAFKA/KIP-382%3A+MirrorMaker+2.0).\n\nIt is used for disaster recovery, with a active - passive model, so it will be easier to get target cluster and consumer / producer up and runnning. It can be used to replicate over multiple clusters.\nIt is possible to deploy in an active - active mode where both clusters get continuous data and replicated data.\n\nIn replication, data in topic, topic states and metadata are replicated.\n\nIBM Event Streams release 10.0 is supporting Mirror Maker 2 as part of the [geo-replication feature](https://ibm.github.io/event-streams/georeplication/about/).\n\n## General concepts\n\n[Mirror maker 2.0](https://strimzi.io/docs/master/#con-configuring-mirror-maker-deployment-configuration-kafka-mirror-maker) is the new solution to replicate data in topics from one Kafka cluster to another. It uses the [Kafka Connect](../kafka-connect/) framework to simplify configuration and horizontal scaling. \n\nThe figure below illustrates the MirrorMaker 2.0 internal components running within Kafka Connect.\n\n![Kafka Connect](../images/mm-k-connect.png)\n\nMirrorMaker 2 uses the cluster name or identifier as prefix for topic, and uses the concept of source topic and target topic. It runs in standalone mode, which can be used for development and test purpose, or in distributed mode for production deployment. With distribution mode, MirrorMaker 2.0 creates the following topics on the target cluster:\n\n* *...-configs.source.internal*: This topic is used to store the connector and task configuration.\n* *...-offsets.source.internal*: This topic is used to store offsets for Kafka Connect.\n* *...-status.source.internal*: This topic is used to store status updates of connectors and tasks.\n* *source.heartbeats*\n* *source.checkpoints.internal*\n\nA typical MirrorMaker 2.0 configuration is done via a property file and defines the replication source and target clusters with their connection properties and the replication flow definition. Here is a simple example for a local cluster replicating to a remote IBM Event Streams cluster using TLS v1.2 for connection encryption and SASL authentication protocol.  The IBM Event Streams instance runs on the Cloud.\n\n```properties\nclusters=source, target\nsource.bootstrap.servers=${KAFKA_SOURCE_BROKERS}\ntarget.bootstrap.servers=${KAFKA_TARGET_BROKERS}\ntarget.security.protocol=SASL_SSL\ntarget.ssl.protocol=TLSv1.2\ntarget.ssl.endpoint.identification.algorithm=https\ntarget.sasl.mechanism=PLAIN\ntarget.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=${KAFKA_TARGET_APIKEY};\n# enable and configure individual replication flows\nsource->target.enabled=true\nsource->target.topics=products\ntasks.max=10\n```\n\n* Topics to be replicated are configured via a _whitelist_ that can includes regular expression. So if you use naming convention for your topic, you could do fine grained selection of the replicated topic. It is possible to specify topic to do not replicate via the _blacklist_ property.\n* White listed topics are set with the `source->target.topics` attribute of the replication flow and uses [Java regular expression](https://www.vogella.com/tutorials/JavaRegularExpressions/article.html) syntax.\n* Blacklisted topics: by default the following pattern is applied:\n\n```properties\nblacklist = [follower\\.replication\\.throttled\\.replicas, leader\\.replication\\.throttled\\.replicas, message\\.timestamp\\.difference\\.max\\.ms, message\\.timestamp\\.type, unclean\\.leader\\.election\\.enable, min\\.insync\\.replicas]\n```\n\nWe can also define the _blacklist_ with the properties: `topics.blacklist`. Comma-separated lists and Java Regular Expressions are supported.\n\nInternally, `MirrorSourceConnector` and `MirrorCheckpointConnector` will create multiple Kafka tasks (up to the value of `tasks.max` property), and `MirrorHeartbeatConnector` creates an additional task. `MirrorSourceConnector` will have one task per topic-partition combination to replicate, while `MirrorCheckpointConnector` will have one task per consumer group. The Kafka Connect framework uses the coordinator API, with the `assign()` API, so there is no consumer group used while fetching data from source topics. There is no call to `commit()` either; rebalancing occurs only when there is a new topic created that matches the _whitelist_ pattern.\n\nMirror Maker 2 can run on VM, or within container on kubernetes cluster. \n\n### Why replicating?\n\nThe classical needs for replication between clusters can be bullet listed as:\n\n* Disaster recovery when one secondary cluster is passive while the producer and consumers are on the active cluster in the primary data center: The following article goes over those principals.\n* Active active cluster mirroring for inter services communication: consumers and producers are on both side and consumer or produce to their local cluster.\n* Moving data to read only cluster as a front door to data lake, or to do cross data centers aggregation on the different event streams: Fan-in to get holistic data view.\n* GDPR compliance to isolate data in country and geography\n* Hybrid cloud operations to share data between on-premise cluster and managed service clusters.\n\n\n## Deployment examples\n\nWe encourage you to go over our [Mirror maker 2 labs](../../scenarios/kafka-mm2/) which addresses different replication scenarios. The `Connect` column defines where the Mirror Maker 2 runs.\n\n\n| Scenario | Source                 | Target                 | Connect |\n|-------------|------------------------|------------------------|:-------:|\n| 1  | Event Streams on Cloud  | Local Kafka | Local on localhost   |\n\n\n## Replication considerations\n\n### Topic metadata replication\n\nIt is possible to disable the topic metadata replication. We do not encourage to do so. Per design topic can be added dynamically, specially when developing with Kafka Streams where intermediate topics are created, and topic configuration can be altered to increase the number of partitions. Changes to the source topic are dynamically propagated to the target avoiding maintenance nightmare.\nBy synchronizing configuration properties, the need for rebalancing is reduced.\n\nWhen doing manual configuration, even if the initial topic configuration was duplicated, any dynamic changes to the topic properties are not going to be automatically propagated and the administrator needs to change the target topic. If the throughput on the source topic has increased and the number of partition was increased to support the load, then the target cluster will not have the same downstream capability which may lead to overloading (disk space or memory capacity).\n\nAlso if the consumer of a partition is expecting to process the event in order within the partition, then changing the number of partitions between source and target will make the ordering not valid any more. \n\nIf the replication factor are set differently between the two clusters then the availability guarantees of the replicated data may be impacted and bad settings with broker failure will lead to data lost. \n\nFinally, it is important to consider that changes to topic configuration triggers a consumer rebalance which stalls the mirroring process and creates a backlog in the pipeline and increases the end to end latency observed by the downstream application.\n\n### Naming convention\n\nMirror maker 2 sets the prefix for the name of the replicated topic with the name of the source cluster. This is an important and simple solution to avoid infinite loop when doing bi-directional mirroring. At the consumer side the `subscribe()` function supports regular expression for topic name. So a code like:\n\n```java\nkafkaConsumer.subscribe(\"^.*accounts\")\n```\n\nwill listen to all the topics in the cluster having cluster name prefixed topics and the local `accounts` topic. This could be useful when we want to aggregate data from different data centers / clusters.\n\n### Offset management\n\nMirror maker 2 track offset per consumer group. There are two topics created on the target cluster to manage the offset mapping between the source and target clusters and the checkpoints of the last committed offset in the source topic/partitions/consumer group. When a producer sends its record, it gets the offset in the partition the record was saved.\n\nIn the diagram below we have a source topic/partition A with the last write offset done by a producer to be  5, and the last read committed offset by the consumer assigned to partition 1 being 3. The last replicated offset 3 is mapped as 12 in the target partition. offset numbers do not match between partitions.\nSo if the blue consumer needs to reconnect to the green target cluster it will read from the last committed offset which is 12 in this environment. This information is saved in the `checkpoint` topic.\n\n![](../images/mm2-offset-mgt.png)\n\nOffset synch are emitted at the beginning of the replication and when there is a situation which leads that the numbering sequencing diverges. For example the normal behavior is to increase the offset by one 2,3,4,5,6,7, which is mapped to 12,13,14,15,16,... on target cluster. If the write operation for offset 20 at the source is a 17 on the target then MM 2 emits a new offset synch records to the `offset-synch` topic.\n\nThe `checkpoint` and `offset_synch` topics enable replication to be fully restored from the correct offset position on failover. On the following diagram, once the cluster source is down, the consumers on the target cluster are restarted, and they will start from the last committed offset of the source, which was offset 3 that is in fact offset 12 on target replicated topic.\n\n![](../images/mm2-offset-mgt-2.png)\n\n### Record duplication\n\nExactly-once delivery is difficult to achieve in distributed system. In the case of Kafka, producer, brokers, and consumers are working together to ensure only one message is processed end to end. With coding practice and configuration settings, within a unique cluster, Kafka can guarantee exactly once processing. No duplicated records between producer and broker, and committed reads, on consumer side, are not reprocessed in case of consumer restarts.\n\nBut for cross cluster replications, the semantic is based on at least once approach. Duplicates can happen when the mirror maker source task stops before committing its offset to the source topic. A restart will load records from the last committed offset which can generate duplicates. The following diagram illustrate this case, record offset 26 on target topic is a duplicate of record 25.\n\n![](../images/mm2-dup.png)\n\nAs mirror maker 2 is a generic topic consumer, it will not participate to a read-committed process, if the topic includes duplicate messages it will propagate to the target.\n\nIn the future MM2 will be able to support exactly once by using the `checkpoint` topic on the target cluster to keep the state of the committed offset from the consumer side, and write with an atomic transaction between the target topic and the checkpoint topic, and commit the source read offset as part of the same transaction.\n\n### Consumer coding\n\nWe recommend to review the [producer implementation best practices](../kafka-producers-consumers/#kafka-producers) and the [consumer considerations](../kafka-producers-consumers/#kafka-consumers).\n\nFor platform sizing, the main metric to assess, is the number of partitions in the cluster to replicate. The number of partitions and number of brokers are somehow connected as getting a high number of partitions involves increasing the number of brokers. For Mirror Maker 2, as it is based on Kafka connect, there is a unique cluster and each partition mirroring is supported by a task within the JVM so the first constraint is the memory allocated to the container and the heap size.\n\n\n## sort out\n\nTo deploy MirrorMaker2 the tool, we can use the Strimzi Kafka latest docker image deployed on Openshift cluster (We address Strimzi deployment in [this note](../../technology/kafka-mirrormaker/)).\n\nTo define the clusters and topic configuration we use yaml files. One simple example to replicate from IBM Cloud Event streams to Kafka on premise is in the folder [deployments/strimzi/es-mirror-maker.properties](https://github.com/ibm-cloud-architecture/refarch-eda/blob/master/deployments/strimzi/es-mirror-maker.properties)\n\nUsing the same kafka image we can start a mirror maker container with:\n\n```properties\nclusters = source, target\nsource.bootstrap.servers = my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443\nsource.security.protocol=SSL\nsource.ssl.truststore.password=password\nsource.ssl.truststore.location=/home/truststore.jks\ntarget.bootstrap.servers = kafka1:9092\n# enable and configure individual replication flows\nsource->target.enabled = true\nsource->target.topics = test\n```\n\n```bash\n./connect-mirror-maker.sh /home/strimzi.properties\n```\nWhen Mirror maker starts it will create some topics on source cluster to manage the offsets and topic metadata:\n\n```\nmm2-configs.target.internal                                   1            3\nmm2-offset-syncs.target.internal                              1            3\nmm2-offsets.target.internal                                   25           3\nmm2-status.target.internal                                    5            3\n```\n\nAnd on the target cluster:\n\n```\n__consumer_offsets\nheartbeats\nmm2-configs.source.internal\nmm2-offsets.source.internal\nmm2-status.source.internal\nsource.checkpoints.internal\nsource.heartbeats\nsource.test\n```\n\nThe `source.test` topic is the replicated `test` topic from the source cluster.\n\n![](../images/mm-k-connect.png)\n","type":"Mdx","contentDigest":"7cca141cdb957cf15894e7ed2dc5af1c","counter":507,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Kafka Mirror Maker 2\ndescription: Kafka Mirror Maker 2\n---\n\nThis section introduces **Mirror Maker 2.0**, the new replication feature of Kafka 2.4, and how it can be used, along with best practices, for data replication between two Kafka clusters. Mirror Maker 2.0 was defined as part of the Kafka Improvement Process - [KIP 382](https://cwiki.apache.org/confluence/display/KAFKA/KIP-382%3A+MirrorMaker+2.0).\n\nIt is used for disaster recovery, with a active - passive model, so it will be easier to get target cluster and consumer / producer up and runnning. It can be used to replicate over multiple clusters.\nIt is possible to deploy in an active - active mode where both clusters get continuous data and replicated data.\n\nIn replication, data in topic, topic states and metadata are replicated.\n\nIBM Event Streams release 10.0 is supporting Mirror Maker 2 as part of the [geo-replication feature](https://ibm.github.io/event-streams/georeplication/about/).\n\n## General concepts\n\n[Mirror maker 2.0](https://strimzi.io/docs/master/#con-configuring-mirror-maker-deployment-configuration-kafka-mirror-maker) is the new solution to replicate data in topics from one Kafka cluster to another. It uses the [Kafka Connect](../kafka-connect/) framework to simplify configuration and horizontal scaling. \n\nThe figure below illustrates the MirrorMaker 2.0 internal components running within Kafka Connect.\n\n![Kafka Connect](../images/mm-k-connect.png)\n\nMirrorMaker 2 uses the cluster name or identifier as prefix for topic, and uses the concept of source topic and target topic. It runs in standalone mode, which can be used for development and test purpose, or in distributed mode for production deployment. With distribution mode, MirrorMaker 2.0 creates the following topics on the target cluster:\n\n* *...-configs.source.internal*: This topic is used to store the connector and task configuration.\n* *...-offsets.source.internal*: This topic is used to store offsets for Kafka Connect.\n* *...-status.source.internal*: This topic is used to store status updates of connectors and tasks.\n* *source.heartbeats*\n* *source.checkpoints.internal*\n\nA typical MirrorMaker 2.0 configuration is done via a property file and defines the replication source and target clusters with their connection properties and the replication flow definition. Here is a simple example for a local cluster replicating to a remote IBM Event Streams cluster using TLS v1.2 for connection encryption and SASL authentication protocol.  The IBM Event Streams instance runs on the Cloud.\n\n```properties\nclusters=source, target\nsource.bootstrap.servers=${KAFKA_SOURCE_BROKERS}\ntarget.bootstrap.servers=${KAFKA_TARGET_BROKERS}\ntarget.security.protocol=SASL_SSL\ntarget.ssl.protocol=TLSv1.2\ntarget.ssl.endpoint.identification.algorithm=https\ntarget.sasl.mechanism=PLAIN\ntarget.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=${KAFKA_TARGET_APIKEY};\n# enable and configure individual replication flows\nsource->target.enabled=true\nsource->target.topics=products\ntasks.max=10\n```\n\n* Topics to be replicated are configured via a _whitelist_ that can includes regular expression. So if you use naming convention for your topic, you could do fine grained selection of the replicated topic. It is possible to specify topic to do not replicate via the _blacklist_ property.\n* White listed topics are set with the `source->target.topics` attribute of the replication flow and uses [Java regular expression](https://www.vogella.com/tutorials/JavaRegularExpressions/article.html) syntax.\n* Blacklisted topics: by default the following pattern is applied:\n\n```properties\nblacklist = [follower\\.replication\\.throttled\\.replicas, leader\\.replication\\.throttled\\.replicas, message\\.timestamp\\.difference\\.max\\.ms, message\\.timestamp\\.type, unclean\\.leader\\.election\\.enable, min\\.insync\\.replicas]\n```\n\nWe can also define the _blacklist_ with the properties: `topics.blacklist`. Comma-separated lists and Java Regular Expressions are supported.\n\nInternally, `MirrorSourceConnector` and `MirrorCheckpointConnector` will create multiple Kafka tasks (up to the value of `tasks.max` property), and `MirrorHeartbeatConnector` creates an additional task. `MirrorSourceConnector` will have one task per topic-partition combination to replicate, while `MirrorCheckpointConnector` will have one task per consumer group. The Kafka Connect framework uses the coordinator API, with the `assign()` API, so there is no consumer group used while fetching data from source topics. There is no call to `commit()` either; rebalancing occurs only when there is a new topic created that matches the _whitelist_ pattern.\n\nMirror Maker 2 can run on VM, or within container on kubernetes cluster. \n\n### Why replicating?\n\nThe classical needs for replication between clusters can be bullet listed as:\n\n* Disaster recovery when one secondary cluster is passive while the producer and consumers are on the active cluster in the primary data center: The following article goes over those principals.\n* Active active cluster mirroring for inter services communication: consumers and producers are on both side and consumer or produce to their local cluster.\n* Moving data to read only cluster as a front door to data lake, or to do cross data centers aggregation on the different event streams: Fan-in to get holistic data view.\n* GDPR compliance to isolate data in country and geography\n* Hybrid cloud operations to share data between on-premise cluster and managed service clusters.\n\n\n## Deployment examples\n\nWe encourage you to go over our [Mirror maker 2 labs](../../scenarios/kafka-mm2/) which addresses different replication scenarios. The `Connect` column defines where the Mirror Maker 2 runs.\n\n\n| Scenario | Source                 | Target                 | Connect |\n|-------------|------------------------|------------------------|:-------:|\n| 1  | Event Streams on Cloud  | Local Kafka | Local on localhost   |\n\n\n## Replication considerations\n\n### Topic metadata replication\n\nIt is possible to disable the topic metadata replication. We do not encourage to do so. Per design topic can be added dynamically, specially when developing with Kafka Streams where intermediate topics are created, and topic configuration can be altered to increase the number of partitions. Changes to the source topic are dynamically propagated to the target avoiding maintenance nightmare.\nBy synchronizing configuration properties, the need for rebalancing is reduced.\n\nWhen doing manual configuration, even if the initial topic configuration was duplicated, any dynamic changes to the topic properties are not going to be automatically propagated and the administrator needs to change the target topic. If the throughput on the source topic has increased and the number of partition was increased to support the load, then the target cluster will not have the same downstream capability which may lead to overloading (disk space or memory capacity).\n\nAlso if the consumer of a partition is expecting to process the event in order within the partition, then changing the number of partitions between source and target will make the ordering not valid any more. \n\nIf the replication factor are set differently between the two clusters then the availability guarantees of the replicated data may be impacted and bad settings with broker failure will lead to data lost. \n\nFinally, it is important to consider that changes to topic configuration triggers a consumer rebalance which stalls the mirroring process and creates a backlog in the pipeline and increases the end to end latency observed by the downstream application.\n\n### Naming convention\n\nMirror maker 2 sets the prefix for the name of the replicated topic with the name of the source cluster. This is an important and simple solution to avoid infinite loop when doing bi-directional mirroring. At the consumer side the `subscribe()` function supports regular expression for topic name. So a code like:\n\n```java\nkafkaConsumer.subscribe(\"^.*accounts\")\n```\n\nwill listen to all the topics in the cluster having cluster name prefixed topics and the local `accounts` topic. This could be useful when we want to aggregate data from different data centers / clusters.\n\n### Offset management\n\nMirror maker 2 track offset per consumer group. There are two topics created on the target cluster to manage the offset mapping between the source and target clusters and the checkpoints of the last committed offset in the source topic/partitions/consumer group. When a producer sends its record, it gets the offset in the partition the record was saved.\n\nIn the diagram below we have a source topic/partition A with the last write offset done by a producer to be  5, and the last read committed offset by the consumer assigned to partition 1 being 3. The last replicated offset 3 is mapped as 12 in the target partition. offset numbers do not match between partitions.\nSo if the blue consumer needs to reconnect to the green target cluster it will read from the last committed offset which is 12 in this environment. This information is saved in the `checkpoint` topic.\n\n![](../images/mm2-offset-mgt.png)\n\nOffset synch are emitted at the beginning of the replication and when there is a situation which leads that the numbering sequencing diverges. For example the normal behavior is to increase the offset by one 2,3,4,5,6,7, which is mapped to 12,13,14,15,16,... on target cluster. If the write operation for offset 20 at the source is a 17 on the target then MM 2 emits a new offset synch records to the `offset-synch` topic.\n\nThe `checkpoint` and `offset_synch` topics enable replication to be fully restored from the correct offset position on failover. On the following diagram, once the cluster source is down, the consumers on the target cluster are restarted, and they will start from the last committed offset of the source, which was offset 3 that is in fact offset 12 on target replicated topic.\n\n![](../images/mm2-offset-mgt-2.png)\n\n### Record duplication\n\nExactly-once delivery is difficult to achieve in distributed system. In the case of Kafka, producer, brokers, and consumers are working together to ensure only one message is processed end to end. With coding practice and configuration settings, within a unique cluster, Kafka can guarantee exactly once processing. No duplicated records between producer and broker, and committed reads, on consumer side, are not reprocessed in case of consumer restarts.\n\nBut for cross cluster replications, the semantic is based on at least once approach. Duplicates can happen when the mirror maker source task stops before committing its offset to the source topic. A restart will load records from the last committed offset which can generate duplicates. The following diagram illustrate this case, record offset 26 on target topic is a duplicate of record 25.\n\n![](../images/mm2-dup.png)\n\nAs mirror maker 2 is a generic topic consumer, it will not participate to a read-committed process, if the topic includes duplicate messages it will propagate to the target.\n\nIn the future MM2 will be able to support exactly once by using the `checkpoint` topic on the target cluster to keep the state of the committed offset from the consumer side, and write with an atomic transaction between the target topic and the checkpoint topic, and commit the source read offset as part of the same transaction.\n\n### Consumer coding\n\nWe recommend to review the [producer implementation best practices](../kafka-producers-consumers/#kafka-producers) and the [consumer considerations](../kafka-producers-consumers/#kafka-consumers).\n\nFor platform sizing, the main metric to assess, is the number of partitions in the cluster to replicate. The number of partitions and number of brokers are somehow connected as getting a high number of partitions involves increasing the number of brokers. For Mirror Maker 2, as it is based on Kafka connect, there is a unique cluster and each partition mirroring is supported by a task within the JVM so the first constraint is the memory allocated to the container and the heap size.\n\n\n## sort out\n\nTo deploy MirrorMaker2 the tool, we can use the Strimzi Kafka latest docker image deployed on Openshift cluster (We address Strimzi deployment in [this note](../../technology/kafka-mirrormaker/)).\n\nTo define the clusters and topic configuration we use yaml files. One simple example to replicate from IBM Cloud Event streams to Kafka on premise is in the folder [deployments/strimzi/es-mirror-maker.properties](https://github.com/ibm-cloud-architecture/refarch-eda/blob/master/deployments/strimzi/es-mirror-maker.properties)\n\nUsing the same kafka image we can start a mirror maker container with:\n\n```properties\nclusters = source, target\nsource.bootstrap.servers = my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443\nsource.security.protocol=SSL\nsource.ssl.truststore.password=password\nsource.ssl.truststore.location=/home/truststore.jks\ntarget.bootstrap.servers = kafka1:9092\n# enable and configure individual replication flows\nsource->target.enabled = true\nsource->target.topics = test\n```\n\n```bash\n./connect-mirror-maker.sh /home/strimzi.properties\n```\nWhen Mirror maker starts it will create some topics on source cluster to manage the offsets and topic metadata:\n\n```\nmm2-configs.target.internal                                   1            3\nmm2-offset-syncs.target.internal                              1            3\nmm2-offsets.target.internal                                   25           3\nmm2-status.target.internal                                    5            3\n```\n\nAnd on the target cluster:\n\n```\n__consumer_offsets\nheartbeats\nmm2-configs.source.internal\nmm2-offsets.source.internal\nmm2-status.source.internal\nsource.checkpoints.internal\nsource.heartbeats\nsource.test\n```\n\nThe `source.test` topic is the replicated `test` topic from the source cluster.\n\n![](../images/mm-k-connect.png)\n","frontmatter":{"title":"Kafka Mirror Maker 2","description":"Kafka Mirror Maker 2"},"fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/technology/kafka-mirrormaker/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}